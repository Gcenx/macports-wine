--- src/abstraction/MachOFileAbstraction.hpp
+++ src/abstraction/MachOFileAbstraction.hpp
@@ -1278,8 +1278,13 @@ public:
 	uint32_t		version() const							INLINE { return fields.version; }
 	void			set_version(uint32_t value)				INLINE { E::set32(fields.version, value); }
 
-	uint32_t		reserved() const						INLINE { return fields.reserved; }
-	void			set_reserved(uint32_t value)			INLINE { E::set32(fields.reserved, value); }
+#ifdef LC_SOURCE_VERSION
+	uint32_t		sdk() const								INLINE { return fields.sdk; }
+	void			set_sdk(uint32_t value)					INLINE { E::set32(fields.sdk, value); }
+#else
+	uint32_t		sdk() const								INLINE { return fields.reserved; }
+	void			set_sdk(uint32_t value)					INLINE { E::set32(fields.reserved, value); }
+#endif
 
 	typedef typename P::E		E;
 private:
--- src/ld/HeaderAndLoadCommands.hpp
+++ src/ld/HeaderAndLoadCommands.hpp
@@ -1006,13 +1006,13 @@ uint8_t* HeaderAndLoadCommandsAtom<A>::copyVersionLoadCommand(uint8_t* p) const
 		cmd->set_cmd(LC_VERSION_MIN_MACOSX);
 		cmd->set_cmdsize(sizeof(macho_version_min_command<P>));
 		cmd->set_version((uint32_t)macVersion);
-		cmd->set_reserved(0);
+		cmd->set_sdk(0);
 	}
 	else {
 		cmd->set_cmd(LC_VERSION_MIN_IPHONEOS);
 		cmd->set_cmdsize(sizeof(macho_version_min_command<P>));
 		cmd->set_version((uint32_t)iOSVersion);
-		cmd->set_reserved(0);
+		cmd->set_sdk(0);
 	}
 	return p + sizeof(macho_version_min_command<P>);
 }
