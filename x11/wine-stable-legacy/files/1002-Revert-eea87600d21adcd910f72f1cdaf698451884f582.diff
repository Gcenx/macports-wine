From eebb1d8298c15ee1b8f390da1be40eaee9bd4467 Mon Sep 17 00:00:00 2001
From: Gcenx <38226388+Gcenx@users.noreply.github.com>
Date: Mon, 19 Jul 2021 21:02:13 -0400
Subject: [PATCH 2/4] Revert "ntdll: Implement SystemBatteryState for Mac OS."

This reverts commit eea87600d21adcd910f72f1cdaf698451884f582
---
 dlls/ntdll/unix/system.c | 70 ----------------------------------------
 1 file changed, 70 deletions(-)

diff --git a/dlls/ntdll/unix/system.c b/dlls/ntdll/unix/system.c
index 9a51971fe36b..b42ccad0aaa5 100644
--- a/dlls/ntdll/unix/system.c
+++ b/dlls/ntdll/unix/system.c
@@ -49,9 +49,6 @@
 #ifdef HAVE_IOKIT_IOKITLIB_H
 # include <CoreFoundation/CoreFoundation.h>
 # include <IOKit/IOKitLib.h>
-# include <IOKit/pwr_mgt/IOPM.h>
-# include <IOKit/pwr_mgt/IOPMLib.h>
-# include <IOKit/ps/IOPowerSources.h>
 #endif
 #ifdef __APPLE__
 # include <mach/mach.h>
@@ -2935,73 +2932,6 @@ static NTSTATUS fill_battery_state( SYSTEM_BATTERY_STATE *bs )
     return STATUS_SUCCESS;
 }
 
-#elif defined(HAVE_IOKIT_IOKITLIB_H)
-
-static NTSTATUS fill_battery_state( SYSTEM_BATTERY_STATE *bs )
-{
-    CFArrayRef batteries;
-    CFDictionaryRef battery;
-    CFNumberRef prop;
-    uint32_t value, voltage;
-    CFTimeInterval remain;
-
-    if (IOPMCopyBatteryInfo( kIOMasterPortDefault, &batteries ) != kIOReturnSuccess)
-        return STATUS_ACCESS_DENIED;
-
-    if (CFArrayGetCount( batteries ) == 0)
-    {
-        /* Just assume we're on AC with no battery. */
-        bs->AcOnLine = TRUE;
-        return STATUS_SUCCESS;
-    }
-    /* Just use the first battery. */
-    battery = CFArrayGetValueAtIndex( batteries, 0 );
-
-    prop = CFDictionaryGetValue( battery, CFSTR(kIOBatteryFlagsKey) );
-    CFNumberGetValue( prop, kCFNumberSInt32Type, &value );
-
-    if (value & kIOBatteryInstalled)
-        bs->BatteryPresent = TRUE;
-    else
-        /* Since we are executing code, we must have AC power. */
-        bs->AcOnLine = TRUE;
-    if (value & kIOBatteryChargerConnect)
-    {
-        bs->AcOnLine = TRUE;
-        if (value & kIOBatteryCharge)
-            bs->Charging = TRUE;
-    }
-    else
-        bs->Discharging = TRUE;
-
-    /* We'll need the voltage to be able to interpret the other values. */
-    prop = CFDictionaryGetValue( battery, CFSTR(kIOBatteryVoltageKey) );
-    CFNumberGetValue( prop, kCFNumberSInt32Type, &voltage );
-
-    prop = CFDictionaryGetValue( battery, CFSTR(kIOBatteryCapacityKey) );
-    CFNumberGetValue( prop, kCFNumberSInt32Type, &value );
-    bs->MaxCapacity = value * voltage;
-    /* Apple uses "estimated time < 10:00" and "22%" for these, but we'll follow
-     * Windows for now (5% and 33%). */
-    bs->DefaultAlert1 = bs->MaxCapacity / 20;
-    bs->DefaultAlert2 = bs->MaxCapacity / 3;
-
-    prop = CFDictionaryGetValue( battery, CFSTR(kIOBatteryCurrentChargeKey) );
-    CFNumberGetValue( prop, kCFNumberSInt32Type, &value );
-    bs->RemainingCapacity = value * voltage;
-
-    prop = CFDictionaryGetValue( battery, CFSTR(kIOBatteryAmperageKey) );
-    CFNumberGetValue( prop, kCFNumberSInt32Type, &value );
-    bs->Rate = value * voltage;
-
-    remain = IOPSGetTimeRemainingEstimate();
-    if (remain != kIOPSTimeRemainingUnknown && remain != kIOPSTimeRemainingUnlimited)
-        bs->EstimatedTime = (ULONG)remain;
-
-    CFRelease( batteries );
-    return STATUS_SUCCESS;
-}
-
 #else
 
 static NTSTATUS fill_battery_state( SYSTEM_BATTERY_STATE *bs )
