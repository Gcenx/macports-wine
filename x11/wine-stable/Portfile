# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   muniversal 1.1
PortGroup                   compiler_blacklist_versions 1.0
PortGroup                   legacysupport 1.1

# ntdll requires fstatat, since wine-5.9
# https://github.com/wine-staging/wine-staging/commit/762c0e704003f802a5f3470aedd80799cb18c9ef
legacysupport.newest_darwin_requires_legacy 13

# Must be statically linked or -preloader breaks
legacysupport.use_static yes

# Keep the wine-stable, wine-devel and wine-staging ports as similar as possible.

name                        wine-stable
conflicts                   wine-devel wine-staging
set my_name                 wine
version                     7.0
revision                    9
set branch                  [lindex [split ${version} .] 0].0
license                     LGPL-2.1+
categories                  x11

# arm64 compile of wine will only support arm64 Windows binaries
supported_archs             i386 x86_64
maintainers                 {@gcenx}
homepage                    https://www.winehq.org
distname                    ${my_name}-${version}
dist_subdir                 ${my_name}
set wine_distfile           ${distname}${extract.suffix}
worksrcdir                  wine-${distname}

description \
    A Windows API implementation

long_description \
    Wine is a compatibility layer capable of running \
    Windows applications. \
    Instead of simulating internal Windows logic like \
    a virtual machine or emulator, Wine translates \
    Windows API calls into POSIX calls on-the-fly, \
    eliminating the performance and memory penalties \
    of other methods and allowing you to cleanly \
    integrate Windows applications into your desktop.

master_sites \
    https://github.com/wine-mirror/wine/archive/:winesource

distfiles \
    ${wine_distfile}:winesource

checksums \
    ${wine_distfile} \
    rmd160  3e16bacce3d92a457966b770ea4a1286d98531e2 \
    sha256  c101a6c1cc486aaca6d97a0b91368a42c6bebaeb4d6951e9b2dc82afa4673378 \
    size    44990807

depends_build \
    port:bison \
    port:cctools \
    port:flex \
    port:gettext \
    port:ld64 \
    port:mingw-w64 \
    port:pkgconfig

depends_lib \
    port:freetype \
    path:lib/pkgconfig/gnutls.pc:gnutls \
    port:gstreamer1 \
    port:gstreamer1-gst-plugins-base \
    port:gstreamer1-gst-plugins-good \
    port:libpcap \
    port:libsdl2 \
    port:openal-soft

depends_run \
    path:share/curl/curl-ca-bundle.crt:curl-ca-bundle \
    port:mingw-w64-wine-gecko \
    port:mingw-w64-wine-mono

patch.pre_args \
    -p1

# https://bugs.winehq.org/show_bug.cgi?id=34166#c103
patchfiles-append \
    0001-winemac.drv-No-Flicker-patch.diff

# Older versions of macOS have expired certs, this allows wine to use curl-ca-bundle.crt
patchfiles-append \
    0002-crypt32-expand-cert-search-paths.diff

# Keep in sync with default wine-gecko Portfile (to avoid orphaned ports)
# Bump wine-gecko to 2.47.3
# https://gitlab.winehq.org/wine/wine/-/commit/05b9bc2161bc2729e6ffe5b28fbcda9fcb9c64aa
patchfiles-append \
    0003-mshtml_update_wine_gecko.diff

# Keep in sync with default wine-mono Portfile (to avoid orphaned ports)
# Bump wine-mono to 7.3.0
# https://gitlab.winehq.org/wine/wine/-/commit/aa0186be62d6bc71a8b08da5abc1d89650939c19
patchfiles-append \
    0004-mscore_update_wine_mono.diff

# layer backed views only works on macOS Mojave and later, since wine-6.17
# https://bugs.winehq.org/show_bug.cgi?id=52354
if {${os.major} < 18} {
    patchfiles-append \
        1001-Revert-winemac.drv-Remove-now-unused-WineContentView.diff \
        1002-Revert-winemac.drv-Set-the-surface-contents-directly.diff \
        1003-Revert-winemac.drv-Move-GL-context-update-code-to-vi.diff \
        1004-Revert-winemac.drv-Use-a-mask-layer-to-support-windo.diff \
        1005-Revert-winemac.drv-Enable-layer-backed-views.diff
}

post-patch {
    reinplace "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/dlls/crypt32/unixlib.c
}

configure.checks.implicit_function_declaration.whitelist-append \
    __clear_cache \
    fallocate \
    gethostbyaddr_r \
    gethostbyname_r \
    sched_setaffinity

# wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install \
    ${worksrcpath}/tools/install-sh

configure.args \
    --without-alsa \
    --without-capi \
    --with-coreaudio \
    --with-cups \
    --without-dbus \
    --without-fontconfig \
    --with-freetype \
    --with-gettext \
    --without-gettextpo \
    --without-gphoto \
    --with-gnutls \
    --without-gssapi \
    --with-gstreamer \
    --without-inotify \
    --without-krb5 \
    --with-ldap \
    --with-mingw \
    --without-netapi \
    --with-openal \
    --with-opencl \
    --with-opengl \
    --without-oss \
    --with-pcap \
    --with-pthread \
    --without-pulse \
    --without-sane \
    --with-sdl \
    --without-udev \
    --with-unwind \
    --without-usb \
    --without-v4l2 \
    --without-vkd3d \
    --without-x

# wine has a native display driver, since wine-1.5.26
variant x11 {
    depends_lib-append \
        port:libGLU \
        port:mesa \
        port:xorg-libX11 \
        port:xorg-libXcomposite \
        port:xorg-libXcursor \
        port:xorg-libXext \
        port:xorg-libXi \
        port:xorg-libXinerama \
        port:xorg-libXrandr \
        port:xorg-libXxf86vm \
        port:xorg-libsm \
        port:xorg-xorgproto \
        port:xrender

    configure.args-delete \
        --without-x

    configure.args-append \
        --with-osmesa \
        --with-xcomposite \
        --with-xcursor \
        --with-xfixes \
        --with-xinerama \
        --with-xinput \
        --with-xinput2 \
        --with-xrandr \
        --with-xrender \
        --with-xshape \
        --with-xxf86vm \
        --with-x \
        --x-include=${prefix}/include \
        --x-lib=${prefix}/lib
}

# Workaround weirdness with GSTREAMER_CFLAGS not always getting set from pkgconfig
configure.args-append \
    GSTREAMER_CFLAGS='-I${prefix}/include/gstreamer-1.0 -I${prefix}/include/glib-2.0 -I${prefix}/lib/glib-2.0/include -I${prefix}/include/orc-0.4'

# Standard dlopen() is used so wine(64) no longer finds dylibs, since wine-5.6
# https://bugs.winehq.org/show_bug.cgi?id=49199
configure.ldflags-append \
    -Wl,-rpath,${prefix}/lib

configure.args.i386-append \
    --with-wine64=${workpath}/${worksrcdir}-x86_64 \
    --without-vulkan

configure.args.x86_64-append \
    --enable-win64

if {[llength ${supported_archs}] > 1} {
    variant_set universal
}

# Avoid weird linker errors with Xcode 10 and later
if {${os.major} > 18} {
    macosx_deployment_target 10.14
}

# Vulkan is supported on macOS through MoltenVK, since wine-3.13
if {${os.major} >= 15} {
    depends_lib-append \
        path:lib/libMoltenVK.dylib:MoltenVK

    depends_skip_archcheck-append \
        MoltenVK

    configure.args.x86_64-append \
        --with-vulkan \
        ac_cv_lib_soname_MoltenVK=libMoltenVK.dylib \
        ac_cv_lib_soname_vulkan=
}

if {${os.major} < 15} {
    depends_build-append        port:MacOSX10.11.sdk
    configure.sdkroot           ${prefix}/Developer/SDKs/MacOSX10.11.sdk
    
    # Avoid linking Metal or rev-upgrade will cry
    # Support GPU initialization via Metal, since wine-4.15
    # https://gitlab.winehq.org/wine/wine/-/commit/0699089f0ea65c8d66b2cdcdb0731c432720969e
    configure.args-append       ac_cv_header_Metal_Metal_h=
}

# wine requires clang >= 3.8
# FSF GCC cannot compile code using Apple's "blocks" language extensions
compiler.blacklist-append   {*gcc*} {clang < 800} {macports-clang-3.*}

variant usb description {Build ${name} with USB support} {
    depends_lib-append port:libusb
    configure.args-delete --wthout-usb
    configure.args-append --with-usb
}

if {${os.major} < 12} {
    known_fail yes
    archive_sites
    distfiles
    depends_build
    depends_lib
    pre-fetch {
        ui_error "${name} @${version} requires Mac OS X 10.8 or later."
        return -code error "incompatible Mac OS X version"
    }
}

destroot.target install-lib

post-destroot {
    # Add custom tool for easy launching explorer
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/explorer

    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README \
        ${destroot}${docdir}
}

if {${universal_possible} && [variant_isset universal]} {
    notes-append "
        \n
        Wine supports both 32-bit and 64-bit now. It is compatible with your\
        existing 32-bit wine prefix, but it will now default to 64-bit when you\
        create a new wine prefix. The architecture can be selected using the\
        WINEARCH environment variable which can be set to either \"win32\" or\
        \"win64\".

        To create a new pure 32-bit prefix, you can run:
            \$ WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg

        See the Wine FAQ for details: https://wiki.winehq.org/FAQ#Wineprefixes
    "
}

livecheck.url               ${homepage}
livecheck.type              regex
livecheck.regex             {"/announce/([0-9]+\.0(\.[0-9]+)*)"}
