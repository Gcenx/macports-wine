# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   github 1.0
PortGroup                   muniversal 1.0
PortGroup                   compiler_blacklist_versions 1.0
PortGroup                   active_variants 1.1

# Please keep the wine-stable, wine-devel, wine-staging and wine-crossover ports as similar as possible.

# When updating the version of wine, update wine_gecko and wine_mono to compatible versions
# as referenced in the source code. Check here by replacing X.Y with the version:
# https://source.winehq.org/git/wine.git/blob/refs/tags/wine-X.Y:/dlls/appwiz.cpl/addons.c
# see also http://wiki.winehq.org/Gecko and http://wiki.winehq.org/Mono

# Crossover-specific bug reports are accepted at info@codeweavers.com

name                        wine-crossover
conflicts                   wine wine-stable wine-devel wine-staging
set my_name                 wine

github.setup                Gcenx winecx crossover-wine-19.0.2
revision                    2

license                     LGPL-2.1+
categories                  x11
maintainers                 {gcenx @gcenx}
homepage                    https://www.codeweavers.com/products/more-information/source
platforms                   darwin
distname                    ${version}
dist_subdir                 ${my_name}
use_parallel_build          yes

description                 A Windows API implementation (Wine 4.12.1 with CodeWeavers modifications for CrossOver)

long_description            Wine is a compatibility layer capable of running \
                            Windows applications. \
                            This version contains the CodeWeavers patches for \
                            CrossOver. \
                            Instead of simulating internal Windows logic like \
                            a virtual machine or emulator, Wine translates \
                            Windows API calls into POSIX calls on-the-fly, \
                            eliminating the performance and memory penalties \
                            of other methods and allowing you to cleanly \
                            integrate Windows applications into your desktop.

# GitHub requires TLS v1.2
if {${os.major} > 15} {
    github.tarball_from         archive
} else {
    depends_build-append        port:curl
    
    fetch {
            # Manually download the file(s) if they don't exist
            if {![file exists ${portdbpath}/distfiles/${dist_subdir}/${github.version}.tar.gz ]} {
                system -W /bin "cd ${portdbpath}/distfiles/${dist_subdir}/ && ${prefix}/bin/curl -LO https://github.com/${github.author}/${github.project}/archive/refs/tags/${github.version}.tar.gz"
            }
    }
}

checksums                   rmd160  270963d5135a56006dd3bfc584e97ee19f8c4d7a \
                            sha256  d08a501b8de030eaca2bd8be9ae425c30b4c9df7ae80ede5e194de91e7c8c441 \
                            size    36482892

# Note: Most of the X11 libs are dlopen()'d
depends_lib                 port:fontconfig \
                            port:freetype \
                            port:FAudio \
                            port:gnutls \
                            port:gstreamer1 \
                            port:gstreamer1-gst-plugins-base \
                            path:include/turbojpeg.h:libjpeg-turbo \
                            port:lcms2 \
                            port:libiconv \
                            port:libpcap \
                            port:libpng \
                            port:libxml2 \
                            port:libxslt \
                            port:mpg123 \
                            port:ncurses \
                            port:openal-soft \
                            port:tiff \
                            port:libunwind \
                            port:wine-gecko-2.47.1 \
                            port:zlib

depends_build               port:bison \
                            port:flex \
                            port:mingw-w64 \
                            port:pkgconfig

# Required patch to compile crossover-wine source
patchfiles                  PATCH-include_distversion.h.diff

# Upgrade wine-gecko to the currently used version with loading from a global location (remove for wine-crossover-20)
patchfiles-append           0001-mshtml_Refactor_Gecko_loading_code.diff \
                            0002-mshtml_Support_loading_Gecko_from_global_location.diff \
                            0003-mshtml_Update_to_Wine_Gecko2.47.1.diff

# Restore wineboot "wait" window
patchfiles-append           Revert_HACK-Disable_the_wait_window_as_it_is_deemed_confusing.diff

# Disable Quicktime
patchfiles-append           PATCH-configure_add_disable_quicktime.diff

# Disable winemenubuilder, stops useless .desktop files
patchfiles-append           HACK-skip_building_winemenubuilder.diff

# Allow overriding LD (remove for wine-crossover-20)
patchfiles-append           PATCH-winegcc_Pass_through_-fuse-ld=_to_the_linker.diff

# Revert CrossOver HACK 10913 (wine_info.plist.in)
patchfiles-append           Revert-Crossover_Hack_10913.diff

# Use actual "USERS" Name not "crossover"
patchfiles-append           Revert-Crossover_Hack_12735.diff

# Revert CrossOver HACK 12791 (desktop symlink to desktop)
patchfiles-append           Revert-CrossOver_Hack_12791.diff

# Alter wineapploader to use wine32on64 when running Catalina or later, else use wine
patchfiles-append           HACK-wineapploader.diff

# https://bugs.winehq.org/show_bug.cgi?id=50436
patchfiles-append           configure_FAudio_Uppercase.diff

# Apple Silicon patches from upstream
# Remove wine-crossover-20.0.4
if {${build_arch} eq "x86_64" && ${os.major} >= 20} {
    patchfiles-append       Rosetta2.diff \
                            M1_GPU.diff
}

# Fixes cross compilation with GCC 11
# Re-check for wine-crossover-21.0.0
#patchfiles-append           PATCH-msvcrt_Add_sincos_to_importlib.diff

pre-configure {
    if {[variant_exists universal] && [variant_isset universal]} {
        foreach arch ${universal_archs_to_use} {
            file mkdir ${worksrcpath}-${arch}
        }

        configure.cmd ${worksrcpath}/configure
    }
}

# Wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install           ${worksrcpath}/tools/install-sh

configure.args              --without-alsa \
                            --without-capi \
                            --with-cms \
                            --with-coreaudio \
                            --with-cups \
                            --with-curses \
                            --without-dbus \
                            --with-faudio \
                            --with-fontconfig \
                            --with-freetype \
                            --with-gettext \
                            --without-gettextpo \
                            --without-gphoto \
                            --with-glu \
                            --with-gnutls \
                            --without-gsm \
                            --without-gssapi \
                            --with-gstreamer \
                            --without-hal \
                            --without-inotify \
                            --with-jpeg \
                            --without-krb5 \
                            --with-ldap \
                            --with-mingw \
                            --with-mpg123 \
                            --without-netapi \
                            --with-openal \
                            --with-opencl \
                            --with-opengl \
                            --without-osmesa \
                            --without-oss \
                            --with-pcap \
                            --with-png \
                            --with-pthread \
                            --without-pulse \
                            --without-quicktime \
                            --without-sane \
                            --with-sdl \
                            --with-tiff \
                            --without-udev \
                            --with-unwind \
                            --without-v4l2 \
                            --without-vkd3d \
                            --without-xcomposite \
                            --without-xcursor \
                            --without-xfixes \
                            --without-xinerama \
                            --without-xinput \
                            --without-xinput2 \
                            --with-xml \
                            --without-xrandr \
                            --without-xrender \
                            --without-xshape \
                            --without-xshm \
                            --with-xslt \
                            --without-xxf86vm \
                            --with-zlib \
                            --without-x

# Wine has a native macOS driver since 1.5.26 so X11 is optional
variant x11 {
    depends_lib-append          port:libGLU \
                                port:mesa \
                                port:xorg-libX11 \
                                port:xorg-libXcomposite \
                                port:xorg-libXcursor \
                                port:xorg-libXext \
                                port:xorg-libXi \
                                port:xorg-libXinerama \
                                port:xorg-libXrandr \
                                port:xorg-libXxf86vm \
                                port:xorg-libsm \
                                port:xorg-xorgproto \
                                port:xrender

    configure.args-delete       --without-osmesa \
                                --without-xcomposite \
                                --without-xcursor \
                                --without-xfixes \
                                --without-xinerama \
                                --without-xinput \
                                --without-xinput2 \
                                --without-xrandr \
                                --without-xrender \
                                --without-xshape \
                                --without-xxf86vm \
                                --without-x

    configure.args-append       --with-osmesa \
                                --with-xcomposite \
                                --with-xcursor \
                                --with-xfixes \
                                --with-xinerama \
                                --with-xinput \
                                --with-xinput2 \
                                --with-xrandr \
                                --with-xrender \
                                --with-xshape \
                                --with-xxf86vm \
                                --with-x \
                                --x-include=${prefix}/include \
                                --x-lib=${prefix}/lib
}

# ffmpeg takes forever to build plus would cause a license change
variant ffmpeg {
    depends_lib-append          port:gstreamer1-gst-plugins-good \
                                port:gstreamer1-gst-plugins-bad \
                                port:gstreamer1-gst-plugins-ugly \
                                port:gstreamer1-gst-libav

    configure.args-delete       --without-dbus \
                                --without-krb5

    configure.args-append       --with-dbus \
                                --with-krb5
    
    require_active_variants     port:FAudio wma
}

if {${os.platform} ne "darwin" && (${os.major} >= 9 && ${os.major} <= 18)} {
    default_variants        +x11
}

# Standard dlopen is used within wine since 5.6, wine(64) no longer finds dylibs
# https://bugs.winehq.org/show_bug.cgi?id=49199
configure.ldflags-append          -Wl,-rpath,@loader_path/../

# GCC10 defaults to -fno-common this breaks old wine releases
configure.env-append              CROSSCFLAGS=-fcommon

configure.universal_args

set merger_build_args(x86_64)     "dlldir=\\\\\${destroot}${prefix}/lib/wine64"
set merger_destroot_args(x86_64)  "dlldir=\\\\\${libdir}/wine64"
set merger_configure_args(x86_64) "--enable-win64 --libdir=${prefix}/lib"
set merger_configure_args(i386)   --with-wine64=${workpath}/${worksrcdir}-x86_64

if {${build_arch} eq "x86_64" && ${os.major} >= 19} {
    macosx_deployment_target    "10.14"
    build.args-append           "dlldir=\\\\\${destroot}${prefix}/lib/wine64"
    destroot.args-append        "dlldir=\\\${destroot}${prefix}/lib/wine64"
    configure.args-append       "--enable-win64 --libdir=${prefix}/lib"
}

if {${build_arch} eq "x86_64" && ${os.major} <= 18} {
    default_variants-append     +universal
}

if {![info exists universal_possible]} {
    set universal_possible [expr {${os.universal_supported} && [llength ${configure.universal_archs}] >= 2}]
}
if {${universal_possible} && [variant_isset universal]} {
    supported_archs         i386 x86_64
} elseif {${build_arch} eq "x86_64" && ${os.major} >= 19} {
    supported_archs         x86_64
} else {
    supported_archs         i386
}

# wine requires clang >= 3.8
# FSF GCC cannot compile code using Apple's "blocks" language extensions
compiler.blacklist-append   {*gcc*} {clang < 800} {macports-clang-3.*}
compiler.fallback-append    macports-clang-5.0

platform darwin {
    # On macOS, Core Text is used instead of fontconfig since Wine 1.5.10
    depends_lib-delete                          port:fontconfig
    configure.args-delete                       --with-fontconfig
    configure.args-append                       --without-fontconfig

    # Vulkan is supported on macOS through MoltenVK since Wine 3.13, but because
    # it uses Metal it only works on 64-bit
    if {${os.major} >= 15 && ${universal_possible} && [variant_isset universal]} {
        depends_lib-append                      path:lib/libMoltenVK.dylib:MoltenVK
        depends_skip_archcheck-append           MoltenVK \
                                                CX-MoltenVK \
                                                VulkanSDK
        lappend merger_configure_args(x86_64)   --with-vulkan \
                                                ac_cv_lib_soname_MoltenVK=libMoltenVK.dylib \
                                                ac_cv_lib_soname_vulkan=
        lappend merger_configure_args(i386)     --without-vulkan
    } elseif {${os.major} >= 19} {
        depends_lib-append                      path:lib/libMoltenVK.dylib:MoltenVK
        configure.args-append                   --with-vulkan \
                                                ac_cv_lib_soname_MoltenVK=libMoltenVK.dylib \
                                                ac_cv_lib_soname_vulkan=
    } else {
        configure.args-append                   --without-vulkan
    }

    notes {
        When using the Mac Driver, it might be useful to enable RetinaMode\
        when you're using a high DPI monitor. To do that, open up Wine's\
        Registry Editor:

          wine regedit

        and then navigate to:

          [HKEY_CURRENT_USER\Software\Wine\Mac Driver]

        and then set "RetinaMode" to "y". You may also want to adjust your\
        DPI under the Graphics tab in winecfg.}

    # Even using MacOSX10.11.sdk wine-preloader has issue reserve memory causing crashes
    if {${os.major} < 12} {
        known_fail yes
        archive_sites
        distfiles
        depends_build
        depends_lib
        pre-fetch {
            ui_error "${name} @${version} requires Mac OS X 10.8 or later."
            return -code error "incompatible Mac OS X version"
        }
    } elseif {${os.major} > 18} {
        notes-append {
        Only wine64 will be available on macOS 10.15 and above}
    }
}

if {${os.endian} eq "big"} {
    known_fail yes
    archive_sites
    distfiles
    depends_build
    depends_lib
    pre-fetch {
        ui_error "${name} can only be used on an Intel Mac or other computer with a little-endian processor."
        return -code error "incompatible processor"
    }
}

post-destroot {
    # Add custom tool for easy launching explorer
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/explorer
    # Add the missing default tools
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/msiexec
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/notepad
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regedit
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regsvr32
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineboot
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winecfg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineconsole
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winedbg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winefile
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winemine
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winepath

    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README \
        ${destroot}${docdir}
}

if {${universal_possible} && [variant_isset universal]} {
    notes-append "
        \n
        Wine supports both 32-bit and 64-bit now. It is compatible with your\
        existing 32-bit wine prefix, but it will now default to 64-bit when you\
        create a new wine prefix. The architecture can be selected using the\
        WINEARCH environment variable which can be set to either \"win32\" or\
        \"win64\".

        To create a new pure 32-bit prefix, you can run:
            \$ WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg

        See the Wine FAQ for details: https://wiki.winehq.org/FAQ#Wineprefixes
    "
}

if {${build_arch} eq "x86_64" && ${os.major} >= 20} {
    notes-append "
        \n
        ${name} has additinal patches from upstream wine to function better\
        on Apple Silicon systems when running under Rosetta2
    "
}

livecheck.type              regex
livecheck.url               http://ftp.codeweavers.com/pub/crossover/source/
livecheck.regex             crossover-sources-(\[0-9.\]+)\\.tar
