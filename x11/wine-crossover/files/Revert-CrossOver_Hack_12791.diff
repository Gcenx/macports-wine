--- dlls/shell32/shellpath.c	    2020-06-11 12:25:43.000000000 -0400
+++ dlls/shell32/shellpath.c	    2020-09-19 16:53:00.000000000 -0400
@@ -4568,14 +4568,6 @@
 #endif
 
     /* Last but not least, the Desktop folder */
-    if (getenv("CX_DIRECT_DESKTOP"))
-    {
-    /* Link the Desktop folder to the native one like in vanilla Wine.
-     * Note that this means .lnk files will be created on the user's native
-     * desktop, next to the corresponding .desktop file on Linux. They will
-     * also not be part of the bottle and will thus not be deleted, archived
-     * or packaged with it.
-     */
     if (pszHome)
         strcpy(szDesktopTarget, pszHome);
     else
@@ -4583,10 +4575,6 @@
     heap_free(pszPersonal);
 
     xdg_desktop_dir = xdg_results ? xdg_results[num - 1] : NULL;
-#ifdef __ANDROID__
-    if (!xdg_desktop_dir)
-        xdg_desktop_dir = "/sdcard/Download";
-#endif
     if (xdg_desktop_dir ||
         (_SHAppendToUnixPath(szDesktopTarget, DesktopW) &&
         !stat(szDesktopTarget, &statFolder) && S_ISDIR(statFolder.st_mode)))
@@ -4603,100 +4591,6 @@
             heap_free(pszDesktop);
         }
     }
-    }
-    else
-    {
-        /* CrossOver Hack 12791:
-         * Create the Desktop folder and put a link to the native one inside.
-         */
-        xdg_desktop_dir = xdg_results ? xdg_results[num - 1] : NULL;
-#ifdef __ANDROID__
-        if (!xdg_desktop_dir)
-            xdg_desktop_dir = "/sdcard/Download";
-#endif
-        hr = SHGetFolderPathW(NULL, CSIDL_DESKTOPDIRECTORY|CSIDL_FLAG_CREATE, NULL,
-                              SHGFP_TYPE_DEFAULT, wszTempPath);
-        if (pszHome && SUCCEEDED(hr) &&
-            (pszDesktop = wine_get_unix_file_name(wszTempPath)))
-        {
-#           define szLinuxDesktop  "/My Linux Desktop"
-#           define szMacDesktop    "/My Mac Desktop"
-#           define szNativeDesktop "/My Native Desktop"
-#           define szAndroidDesktop "/My Android Downloads"
-            static const char* szDesktops[] = {szAndroidDesktop, szLinuxDesktop, szMacDesktop,
-                                               szNativeDesktop, NULL};
-            const char* pszNativeDesktop;
-#ifdef __ANDROID__
-            pszNativeDesktop = szAndroidDesktop;
-#elif defined(linux)
-            pszNativeDesktop = szLinuxDesktop;
-#elif defined(__APPLE__)
-            pszNativeDesktop = szMacDesktop;
-#else
-            pszNativeDesktop = szNativeDesktop;
-#endif
-            for (i=0; szDesktops[i]; i++)
-            {
-                char * pszDesktopLink = HeapAlloc(GetProcessHeap(), 0, strlen(pszDesktop) + strlen(szDesktops[i])+1);
-                strcpy(pszDesktopLink, pszDesktop);
-                strcat(pszDesktopLink, szDesktops[i]);
-                rmdir(pszDesktopLink);
-                if (stat(pszDesktopLink, &statFolder) ||
-                    !S_ISDIR(statFolder.st_mode) ||
-                    statFolder.st_uid != geteuid())
-                {
-#ifdef __ANDROID__
-                    int needSameUid = 0;
-#else
-                    int needSameUid = 0;
-#endif
-                    /* Delete the other platforms' links */
-                    unlink(pszDesktopLink);
-                    if (strcmp(szDesktops[i], pszNativeDesktop) != 0)
-                        continue;
-
-                    /* And create one for the current platform */
-                    if (xdg_desktop_dir)
-                        symlink(xdg_desktop_dir, pszDesktopLink);
-                    else
-                    {
-                        strcpy(szDesktopTarget, pszHome);
-                        if (_SHAppendToUnixPath(szDesktopTarget, DesktopW) &&
-                            !stat(szDesktopTarget, &statFolder) &&
-                            S_ISDIR(statFolder.st_mode) &&
-                            needSameUid ? statFolder.st_uid == geteuid() : 1)
-                            symlink(szDesktopTarget, pszDesktopLink);
-                    }
-                }
-                HeapFree(GetProcessHeap(), 0, pszDesktopLink);
-            }
-            HeapFree(GetProcessHeap(), 0, pszDesktop);
-        }
-    }
-
-#ifdef __ANDROID__
-    hr = SHGetFolderPathW(NULL, CSIDL_FAVORITES|CSIDL_FLAG_CREATE, NULL,
-                          SHGFP_TYPE_DEFAULT, wszTempPath);
-    if (SUCCEEDED(hr) && (favorites = wine_get_unix_file_name(wszTempPath)))
-    {
-#define CREATE_SYMLINK(name) \
-        strcpy(target, pszHome); \
-        strcpy(link, favorites); \
-        if (_SHAppendToUnixPath(target, name) && _SHAppendToUnixPath(link, name)) \
-        { \
-            FIXME( "%s -> %s\n", debugstr_a(link), debugstr_a(target) ); \
-            symlink(target, link); \
-        }
-
-        CREATE_SYMLINK(DocumentsW)
-        CREATE_SYMLINK(PicturesW)
-        CREATE_SYMLINK(MusicW)
-        CREATE_SYMLINK(MoviesW)
-        CREATE_SYMLINK(DownloadW)
-        CREATE_SYMLINK(DesktopW)
-#undef CREATE_SYMLINK
-    }
-#endif
 
     /* Free resources allocated by XDG_UserDirLookup() */
     if (xdg_results)
