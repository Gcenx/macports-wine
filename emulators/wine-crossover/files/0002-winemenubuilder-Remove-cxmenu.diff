From 9d93b60e5e24a00bcaad84f2c77c35cf157f8d87 Mon Sep 17 00:00:00 2001
From: Dean M Greer <38226388+Gcenx@users.noreply.github.com>
Date: Wed, 16 Aug 2023 19:25:05 -0400
Subject: [PATCH] winemenubuilder: Remove cxmenu

---
 programs/winemenubuilder/Makefile.in       |   1 -
 programs/winemenubuilder/cxmenu.c          | 385 ---------------------
 programs/winemenubuilder/cxmenu.h          |  42 ---
 programs/winemenubuilder/winemenubuilder.c | 119 +++----
 4 files changed, 54 insertions(+), 493 deletions(-)
 delete mode 100644 programs/winemenubuilder/cxmenu.c
 delete mode 100644 programs/winemenubuilder/cxmenu.h

diff --git a/programs/winemenubuilder/Makefile.in b/programs/winemenubuilder/Makefile.in
index cbf7c403..12326d1e 100644
--- a/programs/winemenubuilder/Makefile.in
+++ b/programs/winemenubuilder/Makefile.in
@@ -4,5 +4,4 @@ IMPORTS   = uuid windowscodecs shell32 shlwapi ole32 user32 advapi32
 EXTRADLLFLAGS = -mwindows -municode
 
 C_SRCS = \
-	cxmenu.c \
 	winemenubuilder.c
diff --git a/programs/winemenubuilder/cxmenu.c b/programs/winemenubuilder/cxmenu.c
deleted file mode 100644
index 511a6b4e..00000000
--- a/programs/winemenubuilder/cxmenu.c
+++ /dev/null
@@ -1,385 +0,0 @@
-/*
- * Invoke the CrossOver menu management scripts.
- *
- * Copyright 2012 Francois Gouget
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- */
-
-#include <stdio.h>
-
-#define COBJMACROS
-
-#include <windows.h>
-#include <winternl.h>
-#include <shlobj.h>
-#include <shlwapi.h>
-#include <errno.h>
-#include "wine/debug.h"
-#include "cxmenu.h"
-
-
-WINE_DEFAULT_DEBUG_CHANNEL(menubuilder);
-
-
-int cx_mode = 1;
-int cx_dump_menus = 0;
-
-static BOOL cx_link_is_64_bit(IShellLinkW *sl, int recurse_level);
-
-
-/*
- * Functions to invoke the CrossOver menu management scripts.
- */
-
-static int cx_wineshelllink(LPCWSTR linkW, int is_desktop, LPCWSTR rootW,
-                            LPCWSTR pathW, LPCWSTR argsW,
-                            LPCWSTR icon_name, LPCWSTR description, LPCWSTR arch)
-{
-    const char *argv[20];
-    int pos = 0;
-    int retcode;
-
-    argv[pos++] = "wineshelllink";
-    argv[pos++] = "--utf8";
-    argv[pos++] = "--root";
-    argv[pos++] = wchars_to_utf8_chars(rootW);
-    argv[pos++] = "--link";
-    argv[pos++] = wchars_to_utf8_chars(linkW);
-    argv[pos++] = "--path";
-    argv[pos++] = wchars_to_utf8_chars(pathW);
-    argv[pos++] = is_desktop ? "--desktop" : "--menu";
-    if (argsW && *argsW)
-    {
-        argv[pos++] = "--args";
-        argv[pos++] = wchars_to_utf8_chars(argsW);
-    }
-    if (icon_name)
-    {
-        argv[pos++] = "--icon";
-        argv[pos++] = wchars_to_utf8_chars(icon_name);
-    }
-    if (description && *description)
-    {
-        argv[pos++] = "--descr";
-        argv[pos++] = wchars_to_utf8_chars(description);
-    }
-    if (arch && *arch)
-    {
-        argv[pos++] = "--arch";
-        argv[pos++] = wchars_to_utf8_chars(arch);
-    }
-    argv[pos] = NULL;
-
-    retcode = __wine_unix_spawnvp((char **)argv, TRUE);
-    if (retcode!=0)
-        WINE_ERR("%s returned %d\n", argv[0], retcode);
-    return retcode;
-}
-
-static WCHAR* cx_escape_string(const WCHAR* src)
-{
-    const WCHAR* s;
-    WCHAR *dst, *d;
-    DWORD len;
-
-    len=1;
-    for (s=src; *s; s++)
-    {
-        switch (*s)
-        {
-        case '\"':
-        case '\\':
-            len+=2;
-            break;
-        default:
-            len+=1;
-        }
-    }
-
-    dst=d=HeapAlloc(GetProcessHeap(), 0, len * sizeof(WCHAR));
-    for (s=src; *s; s++)
-    {
-        switch (*s)
-        {
-        case '\"':
-            *d='\\';
-            d++;
-            *d='\"';
-            d++;
-            break;
-        case '\\':
-            *d='\\';
-            d++;
-            *d='\\';
-            d++;
-            break;
-        default:
-            *d=*s;
-            d++;
-        }
-    }
-    *d='\0';
-
-    return dst;
-}
-
-static void cx_print_value(const char* name, const WCHAR* value)
-{
-    if (value)
-    {
-        WCHAR* str = cx_escape_string(value);
-        char *strA;
-
-        strA = wchars_to_utf8_chars(str);
-
-        printf("\"%s\"=\"%s\"\n", name, strA);
-
-        HeapFree(GetProcessHeap(), 0, str);
-        HeapFree(GetProcessHeap(), 0, strA);
-    }
-}
-
-static void cx_dump_menu(LPCWSTR linkW, int is_desktop, LPCWSTR rootW,
-                         LPCWSTR pathW, LPCWSTR argsW,
-                         LPCWSTR icon_name, LPCWSTR description, LPCWSTR arch)
-{
-    /* -----------------------------------------------------------
-    **   The Menu hack in particular is tracked by 
-    ** CrossOver Hack 13785.
-    ** (the whole system of cx_mode hacks in winemenubuilder
-    ** is a diff from winehq which does not appear to be tracked
-    ** by a bug in the hacks milestone.)
-    ** ----------------------------------------------------------- */
-    char *link = wchars_to_utf8_chars(linkW);
-
-    printf("[%s]\n", link);
-    cx_print_value("IsMenu", (is_desktop ? L"0" : L"1"));
-    cx_print_value("Root", rootW);
-    cx_print_value("Path", pathW);
-    cx_print_value("Args", argsW);
-    cx_print_value("Icon", icon_name);
-    cx_print_value("Description", description);
-    cx_print_value("Arch", arch);
-    printf("\n");
-
-    HeapFree(GetProcessHeap(), 0, link);
-}
-
-int cx_process_menu(LPCWSTR linkW, BOOL is_desktop, DWORD root_csidl,
-                    LPCWSTR pathW, LPCWSTR argsW,
-                    LPCWSTR icon_name, LPCWSTR description, IShellLinkW *sl)
-{
-    const WCHAR *arch = NULL; /* CrossOver hack 14227 */
-    WCHAR rootW[MAX_PATH];
-    int rc;
-
-    /* CrossOver hack 14227 */
-    if (sl && cx_link_is_64_bit(sl, 0)) arch = L"x86_64";
-
-    SHGetSpecialFolderPathW(NULL, rootW, root_csidl, FALSE);
-
-    WINE_TRACE("link=%s %s: %s path=%s args=%s icon=%s desc=%s arch=%s\n",
-               debugstr_w(linkW), is_desktop ? "desktop" : "menu", debugstr_w(rootW),
-               debugstr_w(pathW), debugstr_w(argsW), debugstr_w(icon_name), debugstr_w(description),
-               debugstr_w(arch));
-
-    if (cx_dump_menus)
-    {
-        rc = 0;
-        cx_dump_menu(linkW, is_desktop, rootW, pathW, argsW, icon_name, description, arch);
-    }
-    else
-        rc = cx_wineshelllink(linkW, is_desktop, rootW, pathW, argsW, icon_name, description, arch);
-
-    return rc;
-}
-
-static IShellLinkW* load_link(const WCHAR* link)
-{
-    HRESULT r;
-    IShellLinkW *sl;
-    IPersistFile *pf;
-
-    r = CoCreateInstance(&CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, &IID_IShellLinkW, (void**)&sl);
-    if (SUCCEEDED(r))
-        r = IShellLinkW_QueryInterface(sl, &IID_IPersistFile, (void**)&pf);
-    if (SUCCEEDED(r))
-    {
-        r = IPersistFile_Load(pf, link, STGM_READ);
-        IPersistFile_Release(pf);
-    }
-
-    if (FAILED(r))
-    {
-        IShellLinkW_Release(sl);
-        sl = NULL;
-    }
-
-    return sl;
-}
-
-static BOOL cx_link_is_64_bit(IShellLinkW *sl, int recurse_level)
-{
-    HRESULT hr;
-    WCHAR temp[MAX_PATH];
-    WCHAR path[MAX_PATH];
-    const WCHAR *ext;
-    DWORD type;
-
-    hr = IShellLinkW_GetPath(sl, temp, sizeof(temp)/sizeof(temp[0]), NULL, SLGP_RAWPATH);
-    if (hr != S_OK || !temp[0])
-        return FALSE;
-    ExpandEnvironmentStringsW(temp, path, sizeof(path)/sizeof(path[0]));
-
-    ext = PathFindExtensionW(path);
-    if (!lstrcmpiW(ext, L".lnk") && recurse_level < 5)
-    {
-        IShellLinkW *sl2 = load_link(path);
-        if (sl2)
-        {
-            BOOL ret = cx_link_is_64_bit(sl2, recurse_level + 1);
-            IShellLinkW_Release(sl2);
-            return ret;
-        }
-    }
-
-    if (!GetBinaryTypeW(path, &type))
-        return FALSE;
-
-    return (type == SCS_64BIT_BINARY);
-}
-
-/*
- * A CrossOver winemenubuilder extension.
- */
-
-static BOOL cx_process_dir(WCHAR* dir)
-{
-    HANDLE hFind;
-    WIN32_FIND_DATAW item;
-    int lendir, len;
-    WCHAR* path;
-    BOOL rc;
-
-    WINE_TRACE("scanning directory %s\n", wine_dbgstr_w(dir));
-    lendir = lstrlenW(dir);
-    lstrcatW(dir, L"\\*");
-    hFind=FindFirstFileW(dir, &item);
-    if (hFind == INVALID_HANDLE_VALUE)
-    {
-        WINE_TRACE("unable to open the '%s' directory\n", wine_dbgstr_w(dir));
-        return FALSE;
-    }
-
-    rc = TRUE;
-    path = HeapAlloc(GetProcessHeap(), 0, (lendir+1+MAX_PATH+2+1)*sizeof(WCHAR));
-    lstrcpyW(path, dir);
-    path[lendir] = '\\';
-    while (1)
-    {
-        if (wcscmp(item.cFileName, L".") && wcscmp(item.cFileName, L".."))
-        {
-            WINE_TRACE("  %s\n", wine_dbgstr_w(item.cFileName));
-            len=lstrlenW(item.cFileName);
-            if ((item.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) ||
-                (len >= 5 && lstrcmpiW(item.cFileName+len-4, L".lnk") == 0) ||
-                (len >= 5 && lstrcmpiW(item.cFileName+len-4, L".url") == 0))
-            {
-                lstrcpyW(path+lendir+1, item.cFileName);
-                if (item.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
-                {
-                    if (!(item.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT))  /* skip symlinks */
-                    {
-                        if (!cx_process_dir(path))
-                            rc = FALSE;
-                    }
-                }
-                else if (len >= 5 && lstrcmpiW(item.cFileName+len-4, L".url") == 0)
-                {
-                    WINE_TRACE("  url %s\n", wine_dbgstr_w(path));
-
-                    if (!Process_URL(path, FALSE))
-                        rc = FALSE;
-                }
-                else
-                {
-                    WINE_TRACE("  link %s\n", wine_dbgstr_w(path));
-
-                    if (!Process_Link(path, FALSE))
-                        rc=FALSE;
-                }
-            }
-        }
-
-        if (!FindNextFileW(hFind, &item))
-        {
-            if (GetLastError() != ERROR_NO_MORE_FILES)
-            {
-                WINE_TRACE("got error %lu while scanning the '%s' directory\n", GetLastError(), wine_dbgstr_w(dir));
-                rc = FALSE;
-            }
-            FindClose(hFind);
-            break;
-        }
-    }
-
-    HeapFree(GetProcessHeap(), 0, path);
-    return rc;
-}
-
-BOOL cx_process_all_menus(void)
-{
-    static const DWORD locations[] = {
-        /* CSIDL_STARTUP, Not interested in this one */
-        CSIDL_DESKTOPDIRECTORY, CSIDL_STARTMENU,
-        /* CSIDL_COMMON_STARTUP, Not interested in this one */
-        CSIDL_COMMON_DESKTOPDIRECTORY, CSIDL_COMMON_STARTMENU };
-    WCHAR dir[MAX_PATH+2]; /* +2 for cx_process_dir() */
-    DWORD i, len, attr;
-    BOOL rc;
-
-    rc = TRUE;
-    for (i = 0; i < sizeof(locations)/sizeof(locations[0]); i++)
-    {
-        if (!SHGetSpecialFolderPathW(0, dir, locations[i], FALSE))
-        {
-            WINE_TRACE("unable to get the path of folder %08lx\n", locations[i]);
-            /* Some special folders are not defined in some bottles
-             * so this is not an error
-             */
-            continue;
-        }
-
-        len = lstrlenW(dir);
-        if (len >= MAX_PATH)
-        {
-            /* We've just trashed memory! Hopefully we are OK */
-            WINE_TRACE("Ignoring special folder %08lx because its path is too long: %s\n", locations[i], wine_dbgstr_w(dir));
-            rc = FALSE;
-            continue;
-        }
-
-        /* Only scan directories. This is particularly important for Desktop
-         * which may be a symbolic link to the native desktop.
-         */
-        attr = GetFileAttributesW( dir );
-        if (attr == INVALID_FILE_ATTRIBUTES || !(attr & FILE_ATTRIBUTE_DIRECTORY))
-            WINE_TRACE("%s is not a directory, skipping it\n", debugstr_w(dir));
-        else if (!cx_process_dir(dir))
-            rc = FALSE;
-    }
-    return rc;
-}
diff --git a/programs/winemenubuilder/cxmenu.h b/programs/winemenubuilder/cxmenu.h
deleted file mode 100644
index 0b892254..00000000
--- a/programs/winemenubuilder/cxmenu.h
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Header for the CrossOver menu management scripts.
- *
- * Copyright 2012 Francois Gouget
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- */
-#ifndef _CXMENU_
-#define _CXMENU_
-
-/* Some global variables */
-extern int cx_mode;
-extern int cx_dump_menus;
-
-/* Functions used by the cxmenu backend */
-char* wchars_to_utf8_chars(LPCWSTR string);
-
-/* The backend functions */
-int cx_process_menu(LPCWSTR linkW, BOOL is_desktop, DWORD root_csidl,
-                    LPCWSTR pathW, LPCWSTR argsW,
-                    LPCWSTR icon_name, LPCWSTR description, IShellLinkW *sl);
-
-/* Functions used by the winemenubuilder extensions */
-BOOL Process_Link( LPCWSTR linkname, BOOL bWait );
-BOOL Process_URL( LPCWSTR urlname, BOOL bWait );
-
-/* The winemenubuilder extensions */
-BOOL cx_process_all_menus(void);
-
-#endif /* _CXMENU_ */
diff --git a/programs/winemenubuilder/winemenubuilder.c b/programs/winemenubuilder/winemenubuilder.c
index 3775606e..ae657d87 100644
--- a/programs/winemenubuilder/winemenubuilder.c
+++ b/programs/winemenubuilder/winemenubuilder.c
@@ -87,8 +87,6 @@
 #include "wine/list.h"
 #include "wine/rbtree.h"
 
-#include "cxmenu.h"
-
 WINE_DEFAULT_DEBUG_CHANNEL(menubuilder);
 
 #define in_desktop_dir(csidl) ((csidl)==CSIDL_DESKTOPDIRECTORY || \
@@ -299,7 +297,7 @@ static BOOL create_directories(WCHAR *directory)
     return CreateDirectoryW( directory, NULL ) || GetLastError() == ERROR_ALREADY_EXISTS;
 }
 
-char* wchars_to_utf8_chars(LPCWSTR string)
+static char* wchars_to_utf8_chars(LPCWSTR string)
 {
     char *ret;
     INT size = WideCharToMultiByte(CP_UTF8, 0, string, -1, NULL, 0, NULL, NULL);
@@ -437,9 +435,7 @@ static HRESULT convert_to_native_icon(IStream *icoFile, int *indices, int numInd
             WINE_ERR("error 0x%08lX setting destination bitmap size\n", hr);
             goto endloop;
         }
-        /* CROSSOVER HACK bug 4775: Set PNG resolution to 72 DPI so older
-         * CrossOver can correctly convert it to ICNS. */
-        hr = IWICBitmapFrameEncode_SetResolution(dstFrame, 72, 72);
+        hr = IWICBitmapFrameEncode_SetResolution(dstFrame, 96, 96);
         if (FAILED(hr))
         {
             WINE_ERR("error 0x%08lX setting destination bitmap resolution\n", hr);
@@ -1039,8 +1035,6 @@ static HRESULT open_icon(LPCWSTR filename, int index, BOOL bWait, IStream **ppSt
         if (SUCCEEDED(hr))
             hr = validate_ico(ppStream, ppIconDirEntries, numEntries);
     }
-    if (FAILED(hr) && cx_mode) /* Let cxmenu provide the fallback */
-        return hr;
     if (FAILED(hr) && !bWait)
     {
         hr = open_default_icon(ppStream);
@@ -1980,6 +1974,46 @@ static BOOL is_extension_banned(LPCWSTR extension)
     return FALSE;
 }
 
+static BOOL on_exclude_list(const WCHAR *command)
+{
+    static const WCHAR default_exclude_list[] = L"ieframe.dll\0iexplore.exe\0notepad.exe\0"
+                                                L"winebrowser.exe\0wordpad.exe\0";
+    WCHAR *exclude_list = NULL;
+    const WCHAR *pattern;
+    HKEY key;
+    DWORD size;
+    LSTATUS status;
+    BOOL found = FALSE;
+
+    if ((key = open_associations_reg_key()))
+    {
+        status = RegGetValueW(key, NULL, L"Exclude", RRF_RT_REG_MULTI_SZ, NULL, NULL, &size);
+        if (status == ERROR_SUCCESS)
+        {
+            exclude_list = xmalloc(size);
+            status = RegGetValueW(key, NULL, L"Exclude", RRF_RT_REG_MULTI_SZ, NULL, exclude_list, &size);
+            if (status != ERROR_SUCCESS)
+            {
+                heap_free(exclude_list);
+                exclude_list = NULL;
+            }
+        }
+        RegCloseKey(key);
+    }
+
+    for (pattern = exclude_list ? exclude_list : default_exclude_list; *pattern; pattern += wcslen(pattern) + 1)
+    {
+        if (wcsstr(command, pattern))
+        {
+            found = TRUE;
+            break;
+        }
+    }
+
+    heap_free(exclude_list);
+    return found;
+}
+
 static WCHAR *get_special_mime_type(LPCWSTR extension)
 {
     if (!wcsicmp(extension, L".lnk"))
@@ -2060,6 +2094,15 @@ static BOOL generate_associations(const WCHAR *packages_dir, const WCHAR *applic
             WCHAR *mimeProgId = NULL;
             struct rb_string_entry *entry;
 
+            commandW = assoc_query(ASSOCSTR_COMMAND, extensionW, L"open");
+            if (commandW == NULL)
+                /* no command => no application is associated */
+                goto end;
+
+            if (on_exclude_list(commandW))
+                /* command is on the exclude list => desktop integration is not desirable */
+                goto end;
+
             wcslwr(extensionW);
             friendlyDocNameW = assoc_query(ASSOCSTR_FRIENDLYDOCNAME, extensionW, NULL);
 
@@ -2099,11 +2142,6 @@ static BOOL generate_associations(const WCHAR *packages_dir, const WCHAR *applic
                 hasChanged = TRUE;
             }
 
-            commandW = assoc_query(ASSOCSTR_COMMAND, extensionW, L"open");
-            if (commandW == NULL)
-                /* no command => no application is associated */
-                goto end;
-
             executableW = assoc_query(ASSOCSTR_EXECUTABLE, extensionW, L"open");
             if (executableW)
                 openWithIcon = compute_native_identifier(0, executableW, NULL);
@@ -2258,14 +2296,6 @@ static BOOL InvokeShellLinker( IShellLinkW *sl, LPCWSTR link, BOOL bWait )
         goto cleanup;
     }
 
-    if (cx_mode)
-    {
-        r = cx_process_menu(link, in_desktop_dir(csidl), csidl,
-                            szPath, szArgs, icon_name, szDescription, sl);
-        ReleaseSemaphore( hsem, 1, NULL );
-        goto cleanup;
-    }
-
     if (in_desktop_dir(csidl))
     {
         if (csidl == CSIDL_COMMON_DESKTOPDIRECTORY || !szPath[0])
@@ -2381,16 +2411,6 @@ static BOOL InvokeShellLinkerForURL( IUniformResourceLocatorW *url, LPCWSTR link
         WINE_ERR("failed wait for semaphore\n");
         goto cleanup;
     }
-
-    if (cx_mode)
-    {
-        r = cx_process_menu(link, in_desktop_dir(csidl), csidl,
-                            NULL, NULL, icon_name, NULL, NULL);
-        ReleaseSemaphore(hSem, 1, NULL);
-        ret = (r != 0);
-        goto cleanup;
-    }
-
     if (in_desktop_dir(csidl))
         r = !write_desktop_entry(NULL, NULL, link_name, L"start.exe", urlPath, NULL, NULL, icon_name, NULL);
     else
@@ -2454,7 +2474,7 @@ done:
     return ret;
 }
 
-BOOL Process_Link( LPCWSTR linkname, BOOL bWait )
+static BOOL Process_Link( LPCWSTR linkname, BOOL bWait )
 {
     IShellLinkW *sl;
     IPersistFile *pf;
@@ -2515,7 +2535,7 @@ BOOL Process_Link( LPCWSTR linkname, BOOL bWait )
     return !r;
 }
 
-BOOL Process_URL( LPCWSTR urlname, BOOL bWait )
+static BOOL Process_URL( LPCWSTR urlname, BOOL bWait )
 {
     IUniformResourceLocatorW *url;
     IPersistFile *pf;
@@ -2832,23 +2852,6 @@ static BOOL associations_enabled(void)
     return ret;
 }
 
-static const WCHAR* get_wine_config_dir(void)
-{
-    const WCHAR* nt_path = _wgetenv(L"WINECONFIGDIR");
-
-    if (!nt_path)
-        return NULL;
-
-    if (nt_path[0] == '\\' && nt_path[1] == '?' && nt_path[2] == '?' &&
-        nt_path[3] == '\\' && nt_path[4] && nt_path[5] == ':' && nt_path[6] == '\\')
-    {
-        /* NT path with \??\X:\ prefix */
-        return nt_path + 4;
-    }
-
-    return nt_path;
-}
-
 /***********************************************************************
  *
  *           wWinMain
@@ -2861,9 +2864,6 @@ int PASCAL wWinMain (HINSTANCE hInstance, HINSTANCE prev, LPWSTR cmdline, int sh
     HRESULT hr;
     int ret = 0;
 
-    if (cx_mode)
-        xdg_data_dir = heap_wprintf(L"%s\\windata\\cxmenu", get_wine_config_dir());
-    else
     if (!init_xdg())
         return 1;
 
@@ -2881,13 +2881,12 @@ int PASCAL wWinMain (HINSTANCE hInstance, HINSTANCE prev, LPWSTR cmdline, int sh
 	    break;
         if( !wcscmp( token, L"-a" ) )
         {
-            if (!cx_mode && associations_enabled())
+            if (associations_enabled())
                 RefreshFileTypeAssociations();
             continue;
         }
         if( !wcscmp( token, L"-r" ) )
         {
-            if (!cx_mode)
             cleanup_menus();
             continue;
         }
@@ -2905,16 +2904,6 @@ int PASCAL wWinMain (HINSTANCE hInstance, HINSTANCE prev, LPWSTR cmdline, int sh
                      thumbnail_lnk(lnkFile, outputFile);
             }
         }
-        else if( !lstrcmpW( token, L"--cx-all-menus" ) )
-        {
-            if (!cx_process_all_menus())
-            {
-	        WINE_ERR("failed to build some menu items\n");
-                ret = 1;
-            }
-        }
-        else if( !lstrcmpW( token, L"--cx-dump-menus" ) )
-            cx_dump_menus = 1;
 	else if( token[0] == '-' )
 	{
 	    WINE_ERR( "unknown option %s\n", wine_dbgstr_w(token) );
-- 
2.39.3 (Apple Git-145)

