# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   muniversal 1.1
PortGroup                   compiler_blacklist_versions 1.0
PortGroup                   legacysupport 1.1

# ntdll requires fstatat, since wine-5.9
# https://github.com/wine-staging/wine-staging/commit/762c0e704003f802a5f3470aedd80799cb18c9ef
legacysupport.newest_darwin_requires_legacy 13

# Must be statically linked or -preloader breaks
legacysupport.use_static yes

# Keep the wine-stable, wine-devel, wine-staging and wine-crossover ports as similar as possible.

# Crossover-specific bug reports are accepted at info@codeweavers.com

name                        wine-crossover
conflicts                   wine-stable wine-devel wine-staging
set my_name                 wine
version                     22.0.1
revision                    1
platforms                   {darwin >= 17}
license                     LGPL-2.1+
categories                  emulators

# arm64 compile of wine requires mingw-w64-clang but will only support arm64 Windows binaries
supported_archs             i386 x86_64
maintainers                 {@gcenx}
homepage                    https://www.codeweavers.com/crossover/source
distname                    crossover-sources-${version}
dist_subdir                 ${my_name}
set wine_distfile           ${distname}${extract.suffix}
set wine_version            7.7
worksrcdir                  sources/wine

description \
    A Windows API implementation (wine-${wine_version} \
    with CodeWeavers modifications for CrossOver)

long_description \
    Wine is a compatibility layer capable of running \
    Windows applications. \
    This version contains the CodeWeavers patches for \
    CrossOver. \
    Instead of simulating internal Windows logic like \
    a virtual machine or emulator, Wine translates \
    Windows API calls into POSIX calls on-the-fly, \
    eliminating the performance and memory penalties \
    of other methods and allowing you to cleanly \
    integrate Windows applications into your desktop.

master_sites \
    https://media.codeweavers.com/pub/crossover/source/:winesource

distfiles \
    ${wine_distfile}:winesource

checksums \
    ${wine_distfile} \
    rmd160  cad5aa7f05388c80d2cf7e695b1ccc2f40517835 \
    sha256  dd30b258494c27207c55548fe85ec32db33848ae18120baabe9aa3d014fb37ba \
    size    147683202

depends_build \
    port:bison \
    port:cctools \
    port:flex \
    port:gettext \
    port:ld64 \
    port:mingw-w64 \
    port:pkgconfig

depends_lib \
    port:freetype \
    path:lib/pkgconfig/gnutls.pc:gnutls \
    port:libpcap \
    port:libsdl2

depends_run \
    path:share/curl/curl-ca-bundle.crt:curl-ca-bundle \
    port:mingw-w64-wine-gecko-2.47.2 \
    port:mingw-w64-wine-mono-7.2.0

patch.pre_args -p1

# Patch provided by Josh Dubois, CrossOver product manager, CodeWeavers
patchfiles-append \
    0001-distversion.diff

# This allows wine to use curl-ca-bundle.crt
patchfiles-append \
    0002-crypt32-expand-cert-search-paths.diff

# Remove cxmenu functions
patchfiles-append \
    0003-winemenubuilder-remove-cxmenu.diff

# openal32: Remove dll, remove CX23
#  It's not part of Windows, so applications have to ship the native version anyway.
patchfiles-append \
    0004-openal32-remove-dll.diff

# Import upstreams openldap import, remove CX23
patchfiles-append \
    0005-libs-Import-code-from-upstream-openldap-2.5.13.diff \
    0006-ldap-Don-t-depend-on-the-getopt.h-header.diff \
    0007-ldap-Mark-ldap_int_destroy_global_options-as-a-destr.diff

post-patch {
    reinplace -q "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/dlls/crypt32/unixlib.c
    reinplace -q "s|;(cw)||g"               ${worksrcpath}/loader/wine.inf.in
}

configure.checks.implicit_function_declaration.whitelist-append \
    __clear_cache \
    fallocate \
    gethostbyaddr_r \
    gethostbyname_r \
    sched_setaffinity

# wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install \
    ${worksrcpath}/tools/install-sh

configure.args \
    --without-alsa \
    --without-capi \
    --with-coreaudio \
    --with-cups \
    --without-dbus \
    --without-fontconfig \
    --with-freetype \
    --with-gettext \
    --without-gettextpo \
    --without-gphoto \
    --with-gnutls \
    --without-gssapi \
    --without-gstreamer \
    --without-inotify \
    --without-krb5 \
    --with-mingw \
    --without-netapi \
    --with-opencl \
    --with-opengl \
    --without-oss \
    --with-pcap \
    --with-pthread \
    --without-pulse \
    --without-sane \
    --with-sdl \
    --without-udev \
    --with-unwind \
    --without-usb \
    --without-v4l2 \
    --without-x

configure.pkg_config_path \
    ${prefix}/lib/pkgconfig:${prefix}/share/pkgconfig

# Standard dlopen() is used so wine(64) no longer finds dylibs, since wine-5.6
# https://bugs.winehq.org/show_bug.cgi?id=49199
configure.ldflags-append \
    -Wl,-rpath,${prefix}/lib

configure.args.i386-append \
    --with-wine64=${workpath}/${worksrcdir}-x86_64 \
    --without-vulkan

configure.args.x86_64-append \
    --enable-win64

if {([llength ${supported_archs}] > 1) && (${os.major} < 19)} {
    default_variants-append +universal
}

# Avoid weird linker errors with Xcode 10 and later
if {${os.major} > 18} {
    macosx_deployment_target 10.14
}

# Vulkan is supported on macOS through MoltenVK, since wine-3.13
if {${os.major} >= 15} {
    depends_lib-append \
        path:lib/libMoltenVK.dylib:MoltenVK

    if {"i386" in ${configure.universal_archs}} {
        depends_skip_archcheck-append MoltenVK
    }

    configure.args.x86_64-append \
        --with-vulkan \
        ac_cv_lib_soname_MoltenVK=libMoltenVK.dylib \
        ac_cv_lib_soname_vulkan=
}

if {${os.major} < 15} {
    depends_build-append    port:MacOSX10.11.sdk
    configure.sdkroot       ${prefix}/Developer/SDKs/MacOSX10.11.sdk

    # Avoid linking Metal or rev-upgrade will cry
    # Support GPU initialization via Metal, since wine-4.15
    # https://gitlab.winehq.org/wine/wine/-/commit/0699089f0ea65c8d66b2cdcdb0731c432720969e
    configure.args-append   ac_cv_header_Metal_Metal_h=
}

# wine requires clang >= 3.8
# FSF GCC cannot compile code using Apple's "blocks" language extensions
compiler.blacklist-append   {*gcc*} {clang < 800} {macports-clang-3.*}

variant gstreamer description {Build ${subport} with gstreamer support} {
    depends_lib-append \
        port:gstreamer1 \
        port:gstreamer1-gst-plugins-base \
        port:gstreamer1-gst-plugins-good \
        port:gstreamer1-gst-libav
    configure.args-replace  --without-gstreamer --with-gstreamer
}

# Uncomment variant for CX23
#variant usb description {Build ${subport} with USB support} {
#    depends_lib-append      port:libusb
#    configure.args-replace  --without-usb --with-usb
#}

default_variants-append     +gstreamer

triplet.add_build           cross

# macports-base injects a number of flags that now propagate to mingw-gcc this causes the build to fail since, wine-7.21
# https://gitlab.winehq.org/wine/wine/-/commit/b1f59bc679a8c2dea18a6789a5b9b1a1ae825129
compiler.limit_flags        yes
muniversal.arch_flag        no
muniversal.arch_compiler    yes
configure.ldflags-delete    -L${compiler.library_path}
configure.optflags          -g -O2

# Reduce compilation warnings
configure.cflags-append     -Wno-deprecated-declarations

# Were only installing wine not the development files
destroot.target             install-lib

if {${os.major} > 18} {
    depends_build-append    port:cx-llvm

    patchfiles-append       1001-remove-cross_compiling-check.diff

    configure.cc            ${prefix}/libexec/cx-llvm/bin/clang
    configure.cxx           ${prefix}/libexec/cx-llvm/bin/clang++
    configure.cmd           ${worksrcpath}/configure
    configure.compiler.add_deps no

    configure.args-append \
        --disable-winedbg

    configure.args.i386-append \
        --enable-win32on64 \
        --disable-loader

    pre-configure {
        file mkdir ${worksrcpath}-x86_64
        file mkdir ${worksrcpath}-i386
    }

    configure {
        set configure.dir ${worksrcpath}-x86_64
        portconfigure::configure_main

        set configure.dir ${worksrcpath}-i386
        configure.args.x86_64
        configure.args-append ${configure.args.i386}
        portconfigure::configure_main
    }

    build {
        set build.dir ${worksrcpath}-x86_64
        portbuild::build_main

        set build.dir ${worksrcpath}-i386
        portbuild::build_main
    }

    destroot {
        set destroot.dir ${worksrcpath}-x86_64
        portdestroot::destroot_main

        set destroot.dir ${worksrcpath}-i386
        portdestroot::destroot_main

        # CX22 uses upstreams experimental wow64 system so uses wine64 for everything
        # copy wine64(-preloader) to wine(-preloader) for consistancy and winetricks compatability
        copy ${destroot}${prefix}/bin/wine64 ${destroot}${prefix}/bin/wine
        copy ${destroot}${prefix}/bin/wine64-preloader ${destroot}${prefix}/bin/wine-preloader
    }

    notes-append "
        ${subport} ${version} doesn't support generating 32Bit prefixes
    "
}

post-destroot {
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/msiexec
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/notepad
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regedit
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regsvr32
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineboot
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winecfg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineconsole
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winedbg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winefile
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winemine
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winepath

    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README \
        README.esync \
        ${destroot}${docdir}
}

if {[variant_isset universal]} {
    notes-append "
        \n
        Wine supports both 32-bit and 64-bit now. It is compatible with your\
        existing 32-bit wine prefix, but it will now default to 64-bit when you\
        create a new wine prefix. The architecture can be selected using the\
        WINEARCH environment variable which can be set to either \"win32\" or\
        \"win64\".

        To create a new pure 32-bit prefix, you can run:
            \$ WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg

        See the Wine FAQ for details: https://wiki.winehq.org/FAQ#Wineprefixes
    "
}

livecheck.type              regex
livecheck.url               https://media.codeweavers.com/pub/crossover/source/
livecheck.regex             crossover-sources-(\[0-9.\]+)\\.tar.gz
