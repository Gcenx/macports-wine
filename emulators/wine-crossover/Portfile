# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   compiler_blacklist_versions 1.0
PortGroup                   muniversal 1.1

# Keep the wine-stable, wine-devel and wine-crossover portfiles as similar as possible.

# Crossover-specific bug reports are accepted at info@codeweavers.com
name                        wine-crossover
conflicts                   wine-stable wine-stable-6.0.4 wine-stable-7.0.2 wine-devel wine-devel-6.8 wine-devel-7.22 wine-devel-8.21 wine-staging
set my_name                 wine
version                     22.1.1
revision                    0
platforms                   {darwin >= 17}
license                     LGPL-2.1+
categories                  emulators

# arm64 compile of wine requires mingw-w64-clang but will only support arm64 Windows binaries
supported_archs             i386 x86_64
maintainers                 {@gcenx}
homepage                    https://www.codeweavers.com/crossover/source
distname                    crossover-sources-${version}
dist_subdir                 ${my_name}
set wine_distfile           ${distname}${extract.suffix}
set wine_version            7.7
worksrcdir                  sources/wine

description \
    A Windows API implementation (wine-${wine_version} \
    with CodeWeavers modifications for CrossOver)

long_description \
    Wine is a compatibility layer capable of running \
    Windows applications. \
    This version contains the CodeWeavers patches for \
    CrossOver. \
    Instead of simulating internal Windows logic like \
    a virtual machine or emulator, Wine translates \
    Windows API calls into POSIX calls on-the-fly, \
    eliminating the performance and memory penalties \
    of other methods and allowing you to cleanly \
    integrate Windows applications into your desktop.

master_sites \
    https://media.codeweavers.com/pub/crossover/source/:winesource

distfiles \
    ${wine_distfile}:winesource

checksums \
    ${wine_distfile} \
    rmd160  e514c407e3b7f75339a60fac84360f00791e97bb \
    sha256  cdfe282ce33788bd4f969c8bfb1d3e2de060eb6c296fa1c3cdf4e4690b8b1831 \
    size    147879629

depends_build \
    port:bison \
    bin:flex:flex \
    port:gettext \
    port:mingw-w64 \
    port:pkgconfig

depends_lib \
    port:freetype \
    port:gettext-runtime \
    path:lib/pkgconfig/gnutls.pc:gnutls \
    path:lib/libMoltenVK.dylib:MoltenVK \
    port:libpcap \
    port:libsdl2

depends_run \
    port:mingw-w64-wine-gecko-2.47.2 \
    port:mingw-w64-wine-mono-7.2.0

if {"i386" in ${configure.universal_archs}} {
    depends_skip_archcheck-append MoltenVK
}

patch.pre_args -p1

# Patch provided by Josh Dubois, CrossOver product manager, CodeWeavers
patchfiles-append \
    0001-distversion.diff

# Remove cxmenu functions
patchfiles-append \
    0002-winemenubuilder-remove-cxmenu.diff

# openal32: Remove dll, remove CX23
#  It's not part of Windows, so applications have to ship the native version anyway.
patchfiles-append \
    0003-openal32-remove-dll.diff

# Import upstreams openldap import, remove CX23
patchfiles-append \
    0004-libs-Import-code-from-upstream-openldap-2.5.13.diff \
    0005-ldap-Don-t-depend-on-the-getopt.h-header.diff \
    0006-ldap-Mark-ldap_int_destroy_global_options-as-a-destr.diff

# Remove "CX HACK 21217" in favour of upstreams fix, remove CX23
patchfiles-append \
    0007-server-On-macOS-fake-debug-registers-when-running-un.diff \
    0008-ntdll-Add-a-WARN-when-setting-debug-registers-fails-.diff

# macOS Sonoma
patchfiles-append \
    0009-preloader-sonoma.diff

post-patch {
    # https://gitlab.winehq.org/wine/wine/-/commit/c7a97b5d5d56ef00a0061b75412c6e0e489fdc99
    reinplace -q "/PKG_CONFIG_PATH/d"       ${worksrcpath}/configure
    reinplace -q "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/dlls/crypt32/unixlib.c
}

configure.checks.implicit_function_declaration.whitelist-append \
    __clear_cache \
    fallocate \
    gethostbyaddr_r \
    gethostbyname_r \
    sched_setaffinity

# wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install \
    ${worksrcpath}/tools/install-sh

configure.pre_args.i386 \
    --with-wine64=${workpath}/${worksrcdir}-x86_64

configure.pre_args.x86_64 \
    --enable-win64

configure.args \
    --without-alsa \
    --without-capi \
    --with-coreaudio \
    --with-cups \
    --without-dbus \
    --without-fontconfig \
    --with-freetype \
    --with-gettext \
    --without-gettextpo \
    --without-gphoto \
    --with-gnutls \
    --without-gssapi \
    --without-gstreamer \
    --without-inotify \
    --without-krb5 \
    --with-mingw \
    --without-netapi \
    --with-opencl \
    --with-opengl \
    --without-oss \
    --with-pcap \
    --with-pthread \
    --without-pulse \
    --without-sane \
    --with-sdl \
    --without-udev \
    --with-unwind \
    --without-usb \
    --without-v4l2 \
    --without-x

configure.args.i386     --without-vulkan
configure.args.x86_64   --with-vulkan
configure.env.x86_64    ac_cv_lib_soname_vulkan=

# Standard dlopen() is used so wine(64) no longer finds dylibs, since wine-5.6
# https://bugs.winehq.org/show_bug.cgi?id=49199
configure.ldflags-append    -Wl,-rpath,${compiler.library_path}

# Xcode15 linker requires -ld_classic to enable legacy behaviours required to build wine
set xcode_ok [expr { ${xcodeversion} ne "none" && [vercmp ${xcodeversion} >= "15.0"] } ]
set clt_ok   [expr { ${xcodeversion} eq "none" && ${xcodecltversion} ne "none" && [vercmp ${xcodecltversion} >= "15.0"] } ]
if { ${xcode_ok} || ${clt_ok} } {
    configure.ldflags-prepend   -Wl,-ld_classic
}

if {${os.major} > 18} {
    # Use an older deployment target to avoid new dyld behaviors.
    macosx_deployment_target 10.14
}

# wine requires clang >= 3.8
# FSF GCC cannot compile code using Apple's "blocks" language extensions
compiler.blacklist-append   {*gcc*} {clang < 800} {macports-clang-3.*}

# Uncomment variant for CX23
#variant gphoto description {Build ${subport} with support for digital cameras} {
#    depends_lib-append      port:libgphoto2
#    configure.args-replace  --without-gphoto --with-gphoto
#}

variant gstreamer description {Build ${subport} with GStreamer, for multimedia support} {
    depends_lib-append      port:gstreamer1-gst-plugins-good port:gstreamer1-gst-libav
    configure.args-replace  --without-gstreamer --with-gstreamer
}

# Uncomment variant for CX23
#variant usb description {Build ${subport} with USB support} {
#    depends_lib-append      port:libusb
#    configure.args-replace  --without-usb --with-usb
#}

default_variants            +gstreamer +universal

triplet.add_build           cross

configure.ldflags-delete    -L${compiler.library_path}
configure.optflags          -g -O2
configure.env-append        CROSSCFLAGS=${configure.optflags}

# Reduce compilation warnings
configure.cflags-append     -Wno-deprecated-declarations

# Were only installing wine not the development files
destroot.target             install-lib

if {${os.major} > 18} {
    depends_build-append    port:llvm-cx
    configure.cc            ${prefix}/libexec/llvm-cx/bin/clang
    configure.cxx           ${prefix}/libexec/llvm-cx/bin/clang++
    configure.cmd           ${worksrcpath}/configure
    configure.compiler.add_deps no

    # macports-base injects a number of flags that now propagate to mingw-gcc this causes the build to fail since, wine-7.21
    # https://gitlab.winehq.org/wine/wine/-/commit/b1f59bc679a8c2dea18a6789a5b9b1a1ae825129
    compiler.limit_flags        yes
    muniversal.arch_flag        no
    muniversal.arch_compiler    yes

    configure.pre_args.i386-append \
        --enable-win32on64 \
        --disable-loader

    pre-configure {
        file mkdir ${worksrcpath}-x86_64
        file mkdir ${worksrcpath}-i386
    }

    configure {
        set configure.dir ${worksrcpath}-x86_64
        portconfigure::configure_main

        configure.pre_args.x86_64-delete --enable-win64
        set configure.dir ${worksrcpath}-i386
        configure.args ${configure.pre_args.i386} ${configure.args}
        portconfigure::configure_main
    }

    build {
        set build.dir ${worksrcpath}-x86_64
        portbuild::build_main

        set build.dir ${worksrcpath}-i386
        portbuild::build_main
    }

    destroot {
        set destroot.dir ${worksrcpath}-x86_64
        portdestroot::destroot_main

        set destroot.dir ${worksrcpath}-i386
        portdestroot::destroot_main

        # CX22 uses upstreams experimental wow64 system so uses wine64 for everything
        # copy wine64(-preloader) to wine(-preloader) for consistancy and winetricks compatability
        copy ${destroot}${prefix}/bin/wine64 ${destroot}${prefix}/bin/wine
        copy ${destroot}${prefix}/bin/wine64-preloader ${destroot}${prefix}/bin/wine-preloader
    }

    notes-append "
        ${subport}-${version} doesn't support generating 32Bit prefixes
    "
}

post-destroot {
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/msiexec
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/notepad
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regedit
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regsvr32
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineboot
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winecfg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineconsole
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winedbg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winefile
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winemine
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winepath

    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README \
        README.esync \
        ${destroot}${docdir}
}

if {[option universal_possible] && [variant_isset universal]} {
    notes-append "
        \n
        Wine supports both 32-bit and 64-bit now. It is compatible with your\
        existing 32-bit wine prefix, but it will now default to 64-bit when you\
        create a new wine prefix. The architecture can be selected using the\
        WINEARCH environment variable which can be set to either \"win32\" or\
        \"win64\".

        To create a new pure 32-bit prefix, you can run:
            \$ WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg

        See the Wine FAQ for details: https://wiki.winehq.org/FAQ#Wineprefixes
    "
}

platform darwin arm {
    patchfiles.x86_64                 1001-remove-cross_compiling-check.diff
    configure.pre_args.x86_64-prepend [muniversal::get_triplets x86_64]
}

livecheck.type              regex
livecheck.url               https://media.codeweavers.com/pub/crossover/source/
livecheck.regex             crossover-sources-(\[0-9.\]+)\\.tar.gz
