# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   muniversal 1.1

# Crossover-specific bug reports are accepted at info@codeweavers.com
name                        wine-crossover
conflicts                   wine-stable wine-devel wine-staging
set my_name                 wine
version                     22.1.0
revision                    0
platforms                   {darwin > 18}
license                     LGPL-2.1+
categories                  emulators

supported_archs             x86_64
maintainers                 {@gcenx}
homepage                    https://www.codeweavers.com/crossover/source
distname                    crossover-sources-${version}
dist_subdir                 ${my_name}
set wine_distfile           ${distname}${extract.suffix}
set wine_version            7.7
worksrcdir                  sources/wine

description \
    A Windows API implementation (wine-${wine_version} \
    with CodeWeavers modifications for CrossOver)

long_description \
    Wine is a compatibility layer capable of running \
    Windows applications. \
    This version contains the CodeWeavers patches for \
    CrossOver. \
    Instead of simulating internal Windows logic like \
    a virtual machine or emulator, Wine translates \
    Windows API calls into POSIX calls on-the-fly, \
    eliminating the performance and memory penalties \
    of other methods and allowing you to cleanly \
    integrate Windows applications into your desktop.

master_sites \
    https://media.codeweavers.com/pub/crossover/source/:winesource

distfiles \
    ${wine_distfile}:winesource

checksums \
    ${wine_distfile} \
    rmd160  63352b837b4714a953bc06f1057e1087b659b0c7 \
    sha256  36425ef8e8067784006c775d0e2303bb62301d055cbdaeff639311c662ddd8ea \
    size    147889427

depends_build \
    port:bison \
    port:cctools \
    port:cx-llvm \
    port:flex \
    port:gettext \
    port:ld64 \
    port:mingw-w64 \
    port:pkgconfig

depends_lib \
    port:freetype \
    port:gettext-runtime \
    path:lib/pkgconfig/gnutls.pc:gnutls \
    port:libpcap \
    port:libsdl2 \
    path:lib/libMoltenVK.dylib:MoltenVK

depends_run \
    path:share/curl/curl-ca-bundle.crt:curl-ca-bundle \
    port:mingw-w64-wine-gecko-2.47.2 \
    port:mingw-w64-wine-mono-7.2.0

patch.pre_args -p1

patchfiles-append \
    0001-distversion.diff \
    0002-crypt32-expand-cert-search-paths.diff \
    0003-winemenubuilder-remove-cxmenu.diff

# openal32: Remove dll, remove CX23
#  It's not part of Windows, so applications have to ship the native version anyway.
patchfiles-append \
    0004-openal32-remove-dll.diff

# Import upstreams openldap import, remove CX23
patchfiles-append \
    0005-libs-Import-code-from-upstream-openldap-2.5.13.diff \
    0006-ldap-Don-t-depend-on-the-getopt.h-header.diff \
    0007-ldap-Mark-ldap_int_destroy_global_options-as-a-destr.diff

post-patch {
    reinplace -q "/PKG_CONFIG_LIBDIR/d"     ${worksrcpath}/configure
    reinplace -q "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/dlls/crypt32/unixlib.c
    reinplace -q "s|;(cw)||g"               ${worksrcpath}/loader/wine.inf.in
}

configure.checks.implicit_function_declaration.whitelist-append \
    __clear_cache \
    fallocate \
    gethostbyaddr_r \
    gethostbyname_r \
    sched_setaffinity

# wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install \
    ${worksrcpath}/tools/install-sh

configure.pre_args.i386 \
    --enable-win32on64 \
    --disable-loader \
    --with-wine64=${workpath}/${worksrcdir}-x86_64

configure.pre_args.x86_64 \
    --enable-win64

configure.args \
    --without-alsa \
    --without-capi \
    --with-coreaudio \
    --with-cups \
    --without-dbus \
    --without-fontconfig \
    --with-freetype \
    --with-gettext \
    --without-gettextpo \
    --without-gphoto \
    --with-gnutls \
    --without-gssapi \
    --without-gstreamer \
    --without-inotify \
    --without-krb5 \
    --with-mingw \
    --without-netapi \
    --with-opencl \
    --with-opengl \
    --without-oss \
    --with-pcap \
    --with-pthread \
    --without-pulse \
    --without-sane \
    --with-sdl \
    --without-udev \
    --with-unwind \
    --without-usb \
    --without-v4l2 \
    --with-vulkan \
    --without-x

# Make sure configure doesn't find libvulkan
configure.env.x86_64        ac_cv_lib_soname_vulkan=

# Standard dlopen() is used so wine(64) no longer finds dylibs, since wine-5.6
# https://bugs.winehq.org/show_bug.cgi?id=49199
configure.ldflags-append    -Wl,-rpath,${prefix}/lib

variant gstreamer description {Build ${subport} with GStreamer, for multimedia support} {
    depends_lib-append port:gstreamer1-gst-plugins-good port:gstreamer1-gst-libav
    configure.args-replace  --without-gstreamer --with-gstreamer
}

default_variants            +gstreamer

triplet.add_build           cross

# macports-base injects a number of flags that now propagate to mingw-gcc this causes the build to fail
compiler.limit_flags        yes
muniversal.arch_flag        no
muniversal.arch_compiler    yes
configure.ldflags-delete    -L${compiler.library_path}
configure.optflags          -g -O2
configure.env-append        CROSSCFLAGS=${configure.optflags}

# Reduce compilation warnings
configure.cflags-append     -Wno-deprecated-declarations

# Were only installing wine not the development files
destroot.target             install-lib

configure.cc                ${prefix}/libexec/cx-llvm/bin/clang
configure.cxx               ${prefix}/libexec/cx-llvm/bin/clang++
configure.cmd               ${worksrcpath}/configure
configure.compiler.add_deps no

# Avoid weird linker errors with Xcode 10 and later
macosx_deployment_target    10.14

pre-configure {
    file mkdir ${worksrcpath}-x86_64
    file mkdir ${worksrcpath}-i386
}

configure {
    set configure.dir ${worksrcpath}-x86_64
    portconfigure::configure_main

    configure.pre_args.x86_64-delete --enable-win64
    set configure.dir ${worksrcpath}-i386
    configure.args ${configure.pre_args.i386} ${configure.args}
    portconfigure::configure_main
}

build {
    set build.dir ${worksrcpath}-x86_64
    portbuild::build_main

    set build.dir ${worksrcpath}-i386
    portbuild::build_main
}

pre-destroot {
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/msiexec
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/notepad
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regedit
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/regsvr32
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineboot
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winecfg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/wineconsole
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winedbg
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winefile
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winemine
    xinstall ${worksrcpath}/tools/wineapploader.in ${destroot}${prefix}/bin/winepath
}

destroot {
    set destroot.dir ${worksrcpath}-x86_64
    portdestroot::destroot_main

    set destroot.dir ${worksrcpath}-i386
    portdestroot::destroot_main

    # CX22 uses upstreams experimental wow64 system so uses wine64 for everything
    # copy wine64(-preloader) to wine(-preloader) for consistancy and winetricks compatability
    copy ${destroot}${prefix}/bin/wine64 ${destroot}${prefix}/bin/wine
    copy ${destroot}${prefix}/bin/wine64-preloader ${destroot}${prefix}/bin/wine-preloader
}

post-destroot {
    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README \
        README.esync \
        ${destroot}${docdir}
}

notes "
    ${subport}-${version} doesn't support generating 32Bit prefixes
"

platform darwin arm {
    patchfiles.x86_64       1001-remove-cross_compiling-check.diff
    configure.pre_args.x86_64-prepend [muniversal::get_triplets x86_64]
}

livecheck.type              regex
livecheck.url               https://media.codeweavers.com/pub/crossover/source/
livecheck.regex             crossover-sources-(\[0-9.\]+)\\.tar.gz
