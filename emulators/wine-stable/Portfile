# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   github 1.0
PortGroup                   muniversal 1.1

# Keep the wine-stable, wine-devel and wine-crossover portfiles as similar as possible.

github.setup                wine-mirror wine 10.0 wine-
github.tarball_from         archive
name                        wine-stable
conflicts                   wine-devel wine-staging wine-crossover
set my_name                 wine
revision                    0
# MacPorts does not support i386 on macOS Mojave and new WoW64 requires macOS Catalina 10.15.4
platforms                   {darwin > 15 != 18.*}
set branch                  [lindex [split ${version} .] 0].0
license                     LGPL-2.1+
categories                  emulators
supported_archs             i386 x86_64
maintainers                 {@Gcenx}
homepage                    https://www.winehq.org
dist_subdir                 ${my_name}

description \
    A Windows API implementation

long_description \
    Wine is a compatibility layer capable of running \
    Windows applications. \
    Instead of simulating internal Windows logic like \
    a virtual machine or emulator, Wine translates \
    Windows API calls into POSIX calls on-the-fly, \
    eliminating the performance and memory penalties \
    of other methods and allowing you to cleanly \
    integrate Windows applications into your desktop.

checksums \
    ${distname}${extract.suffix} \
    rmd160  0807d7f380af0851151b7abd04490a9636b187f1 \
    sha256  b3edf134a5698d55bd210f11c3ae833c943abcece75810f6aa8cbd7a9f293ff7 \
    size    51935194

depends_build \
    port:bison \
    bin:flex:flex \
    port:gettext \
    port:mingw-w64 \
    path:bin/pkg-config:pkgconfig

depends_lib \
    port:freetype \
    port:gettext-runtime \
    port:gnutls-devel \
    port:libinotify \
    port:libpcap \
    port:libsdl2

depends_run \
    port:mingw-w64-wine-gecko-2.47.4 \
    port:mingw-w64-wine-mono-9.4.0

post-extract {
    # https://gitlab.winehq.org/wine/wine/-/commit/c7a97b5d5d56ef00a0061b75412c6e0e489fdc99
    reinplace -q "/PKG_CONFIG_LIBDIR/d"  ${worksrcpath}/configure
    reinplace -q "/PKG_CONFIG_LIBDIR/d"  ${worksrcpath}/configure.ac
}

patch.pre_args-replace -p0 -p1

patchfiles-append \
    0001-winemac.drv-no-flicker.diff \
    0002-winehq_macos_hacks.diff \
    0003-wined3d-cwhack-18311.diff \
    0004-winemac.drv-export-essential-apis.diff

patchfiles-append \
    MR6866.diff \
    MR7328.diff

configure.checks.implicit_function_declaration.whitelist-append \
    __clear_cache \
    fallocate \
    gethostbyaddr_r \
    gethostbyname_r \
    sched_setaffinity

# wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install \
    ${worksrcpath}/tools/install-sh

configure.args.x86_64 \
    --enable-win64

configure.args \
    --without-alsa \
    --without-capi \
    --with-coreaudio \
    --with-cups \
    --without-dbus \
    --without-ffmpeg \
    --without-fontconfig \
    --with-freetype \
    --with-gettext \
    --without-gettextpo \
    --without-gphoto \
    --with-gnutls \
    --without-gssapi \
    --without-gstreamer \
    --with-inotify \
    --without-krb5 \
    --with-mingw \
    --without-netapi \
    --with-opencl \
    --with-opengl \
    --without-oss \
    --with-pcap \
    --with-pcsclite \
    --with-pthread \
    --without-pulse \
    --without-sane \
    --with-sdl \
    --without-udev \
    --with-unwind \
    --without-usb \
    --without-v4l2 \
    --without-vulkan \
    --without-wayland \
    --without-x

configure.args-append \
    --disable-tests \
    --disable-winebth_sys \
    --disable-winemenubuilder

configure.env-append        ac_cv_lib_soname_vulkan=

# We need to tell the linker to add MacPorts to the rpath stack.
configure.ldflags-append    -Wl,-rpath,${compiler.library_path}

# wine requires clang >= 3.8
# FSF GCC cannot compile code using Apple's "blocks" language extensions
compiler.blacklist-append   {*gcc*} {clang < 800} {macports-clang-3.*}

# Makes destroot take significantly longer
variant dev description "Install ${subport} development environment" {
    configure.optflags-prepend -g
    build.target            all
    destroot.target-append  install-dev
}

variant gphoto description "Build ${subport} with support for digital cameras" {
    depends_lib-append      port:libgphoto2
    configure.args-replace  --without-gphoto --with-gphoto
}

variant gstreamer description "Build ${subport} with GStreamer, for multimedia support" {
    depends_build-append    port:gstreamer-development
    depends_lib-append      port:gstreamer-runtime
    configure.args-replace  --without-ffmpeg --with-ffmpeg
    configure.args-replace  --without-gstreamer --with-gstreamer

    pre-configure {
        configure.env-append    "FFMPEG_CFLAGS=[exec /Library/Frameworks/GStreamer.framework/Commands/pkg-config --cflags libavutil libavformat libavcodec]"
        configure.env-append    "FFMPEG_LIBS=[exec /Library/Frameworks/GStreamer.framework/Commands/pkg-config --libs libavutil libavformat libavcodec]"
        configure.env-append    "GSTREAMER_CFLAGS=[exec /Library/Frameworks/GStreamer.framework/Commands/pkg-config --cflags gstreamer-1.0 gstreamer-video-1.0 gstreamer-audio-1.0 gstreamer-tag-1.0]"
        configure.env-append    "GSTREAMER_LIBS=[exec /Library/Frameworks/GStreamer.framework/Commands/pkg-config --libs gstreamer-1.0 gstreamer-video-1.0 gstreamer-audio-1.0 gstreamer-tag-1.0]"
    }

    post-configure {
        reinplace -q "s|Versions/1.0/lib/pkgconfig/../../lib|Libraries|g" ${worksrcpath}/config.status
    }
}

variant kerberos description "Build ${subport} with Kerberos, for network authentication protocol support" {
    depends_lib-append      port:kerberos5
    configure.args-replace  --without-krb5 --with-krb5
}

variant hacks description "Build ${subport} with additional patchsets" {
    patchfiles-append \
        2001-win32u-HACK-Allow-faking-HAGS-in-QueryAdapterInfo.diff \
        2002-win32u-Support-DisplayConfigGetDeviceInfo-DISPLAYCON.diff
}

if {${os.major} < 19} {
    # CodeWeavers only tests i386 using MacOSX10.13.sdk
    configure.sdk_version       10.13
    if {${configure.sdkroot} != "${developer_dir}/SDKs/MacOSX${configure.sdk_version}.sdk"} {
        depends_build-append    port:MacOSX${configure.sdk_version}.sdk
        configure.sdkroot       ${prefix}/Developer/SDKs/MacOSX${configure.sdk_version}.sdk
    }

    default_variants            +universal

    if {${universal_possible} && [variant_isset universal]} {
        configure.args.i386     --with-wine64=${workpath}/${worksrcdir}-x86_64

        notes-append "
            \n
            Wine supports both 32-bit and 64-bit now. It is compatible with your\
            existing 32-bit wine prefix, but it will now default to 64-bit when you\
            create a new wine prefix. The architecture can be selected using the\
            WINEARCH environment variable which can be set to either \"win32\" or\
            \"win64\".
            \n
            To create a new pure 32-bit prefix, you can run:
                \$ WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg
            \n
            See the Wine FAQ for details: https://wiki.winehq.org/FAQ#Wineprefixes
        "
    } else {
        supported_archs         i386
    }
}

if {${os.major} > 18} {
    depends_lib-append          path:lib/libMoltenVK.dylib:MoltenVK-latest

    configure.args.x86_64-append --enable-archs=i386,x86_64
    configure.args-replace      --without-vulkan --with-vulkan

    # Setting an older deployment target avoids build error with MacOSX15.sdk
    # https://gitlab.winehq.org/wine/wine/-/merge_requests/5935#note_74758
    macosx_deployment_target    10.15

    default_variants            +gstreamer
}

triplet.add_build           cross
triplet.add_host            none

# macports-base injects a number of flags that now propagate to mingw-gcc this causes the build to fail since, wine-7.21
# https://gitlab.winehq.org/wine/wine/-/commit/b1f59bc679a8c2dea18a6789a5b9b1a1ae825129
compiler.limit_flags        yes
muniversal.arch_flag        no
muniversal.arch_compiler    yes
configure.ldflags-delete    -L${compiler.library_path}
configure.optflags          -O2
configure.env-append        "CROSSCFLAGS=${configure.optflags}"

# Were only installing wine not the development files
destroot.target             install-lib

post-destroot {
    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE.md \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README.md \
        ${destroot}${docdir}

    if {[variant_isset gstreamer]} {
        system "install_name_tool -delete_rpath ${compiler.library_path} ${destroot}${compiler.library_path}/wine/x86_64-unix/winedmo.so"
        system "install_name_tool -delete_rpath ${compiler.library_path} ${destroot}${compiler.library_path}/wine/x86_64-unix/winegstreamer.so"
        system -W ${destroot}${compiler.library_path}/wine/x86_64-unix "/usr/bin/codesign --deep --force --sign - winedmo.so"
        system -W ${destroot}${compiler.library_path}/wine/x86_64-unix "/usr/bin/codesign --deep --force --sign - winegstreamer.so"
    }
}

pre-activate {
    if {${os.major} == 19 && ${os.minor} < 4 && ${os.platform} eq "darwin"} {
        ui_error "You must first update to macOS 10.15.4."
        return -code error "You must first update to macOS 10.15.4."
    }
}

github.livecheck.branch     stable
