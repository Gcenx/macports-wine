# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                  1.0
PortGroup                   compiler_blacklist_versions 1.0
PortGroup                   legacysupport 1.1
PortGroup                   muniversal 1.1

# ntdll requires fstatat, since wine-5.9
# https://github.com/wine-staging/wine-staging/commit/762c0e704003f802a5f3470aedd80799cb18c9ef
legacysupport.newest_darwin_requires_legacy 13

# Must be statically linked or wine(64)-preloader breaks
legacysupport.use_static yes

# Keep the wine-stable, wine-devel and wine-crossover portfiles as similar as possible.

name                        wine-devel
conflicts                   wine-stable wine-staging wine-crossover
set my_name                 wine
version                     8.1
revision                    0
platforms                   {darwin >= 12}
set branch                  [lindex [split ${version} .] 0].x
license                     LGPL-2.1+
categories                  emulators

# arm64 compile of wine will only support arm64 Windows binaries
supported_archs             i386 x86_64
maintainers                 {@gcenx}
homepage                    https://www.winehq.org
distname                    ${my_name}-${version}
dist_subdir                 ${my_name}
set wine_distfile           ${distname}${extract.suffix}
worksrcdir                  wine-${distname}

description \
    A Windows API implementation

long_description \
    Wine is a compatibility layer capable of running \
    Windows applications. \
    Instead of simulating internal Windows logic like \
    a virtual machine or emulator, Wine translates \
    Windows API calls into POSIX calls on-the-fly, \
    eliminating the performance and memory penalties \
    of other methods and allowing you to cleanly \
    integrate Windows applications into your desktop.

master_sites \
    https://github.com/wine-mirror/wine/archive/:winesource

distfiles \
    ${wine_distfile}:winesource

checksums \
    ${wine_distfile} \
    rmd160  57c7fbb318281b117e157ab2b41c911d6f6a5a7e \
    sha256  df3aa58304bf7fdacc0eb9f0fbe09a1f15e0a29a0ecf93886941e901c5418f3c \
    size    48058675

depends_build \
    port:bison \
    port:cctools \
    port:flex \
    port:gettext \
    port:ld64 \
    port:mingw-w64 \
    port:pkgconfig

depends_lib \
    port:freetype \
    port:gettext-runtime \
    path:lib/pkgconfig/gnutls.pc:gnutls \
    port:libpcap \
    port:libsdl2

depends_run \
    path:share/curl/curl-ca-bundle.crt:curl-ca-bundle \
    port:mingw-w64-wine-gecko \
    port:mingw-w64-wine-mono

patch.pre_args -p1

# https://bugs.winehq.org/show_bug.cgi?id=34166#c103
patchfiles-append \
    0001-winemac.drv-No-Flicker-patch.diff

# This allows wine to use curl-ca-bundle.crt
patchfiles-append \
    0002-crypt32-expand-cert-search-paths.diff

# CW HACK 18311: Use VK on 64-bit macOS for d3d10/11
patchfiles-append \
    0003-CW-HACK-18311.diff

# layer backed views only works on macOS Yosemite and later, since wine-7.22
# https://bugs.winehq.org/show_bug.cgi?id=54327
if {${os.major} < 14} {
    patchfiles-append \
        1001-Revert-winemac.drv-Remove-now-unused-WineContentView.diff \
        1002-Revert-winemac.drv-Set-the-surface-contents-directly.diff \
        1003-Revert-winemac.drv-Move-GL-context-update-code-to-vi.diff \
        1004-Revert-winemac.drv-Use-a-mask-layer-to-support-windo.diff \
        1005-Revert-winemac.drv-Enable-layer-backed-views.diff
}

post-patch {
    # https://gitlab.winehq.org/wine/wine/-/commit/c7a97b5d5d56ef00a0061b75412c6e0e489fdc99
    reinplace -q "/PKG_CONFIG_LIBDIR/d"     ${worksrcpath}/configure
    reinplace -q "s|@@PREFIX@@|${prefix}|g" ${worksrcpath}/dlls/crypt32/unixlib.c
}

configure.checks.implicit_function_declaration.whitelist-append \
    __clear_cache \
    fallocate \
    gethostbyaddr_r \
    gethostbyname_r \
    sched_setaffinity

# wine requires the program specified in INSTALL to create intermediate
# directories; /usr/bin/install doesn't.
# http://bugs.winehq.org/show_bug.cgi?id=35310
configure.install \
    ${worksrcpath}/tools/install-sh

configure.pre_args.i386 \
    --with-wine64=${workpath}/${worksrcdir}-x86_64

configure.pre_args.x86_64 \
    --enable-win64

configure.args \
    --without-alsa \
    --without-capi \
    --with-coreaudio \
    --with-cups \
    --without-dbus \
    --without-fontconfig \
    --with-freetype \
    --with-gettext \
    --without-gettextpo \
    --without-gphoto \
    --with-gnutls \
    --without-gssapi \
    --without-gstreamer \
    --without-inotify \
    --without-krb5 \
    --with-mingw \
    --without-netapi \
    --with-opencl \
    --with-opengl \
    --without-oss \
    --with-pcap \
    --with-pthread \
    --without-pulse \
    --without-sane \
    --with-sdl \
    --without-udev \
    --with-unwind \
    --without-usb \
    --without-v4l2 \
    --without-x

# Standard dlopen() is used so wine(64) no longer finds dylibs, since wine-5.6
# https://bugs.winehq.org/show_bug.cgi?id=49199
configure.ldflags-append    -Wl,-rpath,${prefix}/lib

if {([llength ${supported_archs}] > 1) && (${os.major} < 19)} {
    default_variants +universal
}

if {${os.major} > 18} {
    # Avoid weird linker errors with Xcode 10 and later
    macosx_deployment_target 10.14

    # Build i386 & x86_64 PE binaries for WoW64
    configure.pre_args.x86_64-append    --enable-archs=i386,x86_64
}

# Vulkan is supported on macOS through MoltenVK, since wine-3.13
if {${os.major} >= 15} {
    depends_lib-append      path:lib/libMoltenVK.dylib:MoltenVK
    if {"i386" in ${configure.universal_archs}} {
        depends_skip_archcheck-append MoltenVK
    }
    configure.args.i386     --without-vulkan
    configure.args.x86_64   --with-vulkan
    configure.env.x86_64    ac_cv_lib_soname_vulkan=
} else {
    configure.args-append   --without-vulkan
}

if {${os.major} < 15} {
    configure.sdk_version   10.11
    if {${configure.sdkroot} eq ""} {
        depends_build-append    port:MacOSX10.11.sdk
        configure.sdkroot       ${prefix}/Developer/SDKs/MacOSX10.11.sdk
    }
    # Avoid linking Metal or rev-upgrade will cry
    # Support GPU initialization via Metal, since wine-4.15
    # https://gitlab.winehq.org/wine/wine/-/commit/0699089f0ea65c8d66b2cdcdb0731c432720969e
    configure.env-append    ac_cv_header_Metal_Metal_h=
}

# wine requires clang >= 3.8
# FSF GCC cannot compile code using Apple's "blocks" language extensions
compiler.blacklist-append   {*gcc*} {clang < 800} {macports-clang-3.*}

subport wine-staging {
    name \
        wine-staging
    conflicts \
        wine-stable wine-devel wine-crossover

    set staging_version \
        ${version}
    set wine_staging_distfile \
        v${staging_version}${extract.suffix}

    master_sites-append \
        https://github.com/wine-staging/wine-staging/archive/:stagingsource

    distfiles-append \
        ${wine_staging_distfile}:stagingsource

    checksums-append \
        ${wine_staging_distfile} \
        rmd160  57d1bdfbeda120ad14a7935ac261dc7f18aeaca5 \
        sha256  b2c50878e48cd69d5cd1e4cbf5f19d4af10a56db42932aacb8f6316a25c639af \
        size    9527176

    depends_extract-append \
        port:autoconf

    # Running "patchinstall.sh" before patchesfiles that get inherited from wine-devel
    # "eventfd_synchronization" is disabled as macOS doesn't support eventfd
    # "winemac.drv-no-flicker-patch" is disabled as the patch gets inherited from wine-devel
    post-extract {
        system -W ${workpath}/wine-staging-${staging_version}/patches \
            "sh patchinstall.sh DESTDIR=${worksrcpath} --all -W eventfd_synchronization -W winemac.drv-no-flicker-patch"
    }
}

variant gphoto description {Build ${subport} with support for digital cameras} {
    depends_lib-append      port:libgphoto2
    configure.args-replace  --without-gphoto --with-gphoto
}

variant gstreamer description {Build ${subport} with gstreamer support} {
    depends_lib-append      port:gstreamer1-gst-plugins-good port:gstreamer1-gst-libav
    configure.args-replace  --without-gstreamer --with-gstreamer
}

# wine(64)-preloader claims usb interface for no reason
# https://github.com/Gcenx/WineskinServer/discussions/280
variant usb description {Build ${subport} with USB support} {
    depends_lib-append      port:libusb
    configure.args-replace  --without-usb --with-usb
}

default_variants-append     +gstreamer

triplet.add_build           cross

# macports-base injects a number of flags that now propagate to mingw-gcc this causes the build to fail since, wine-7.21
# https://gitlab.winehq.org/wine/wine/-/commit/b1f59bc679a8c2dea18a6789a5b9b1a1ae825129
compiler.limit_flags        yes
muniversal.arch_flag        no
muniversal.arch_compiler    yes
configure.ldflags-delete    -L${compiler.library_path}
configure.optflags          -g -O2
configure.env-append        CROSSCFLAGS=${configure.optflags}

# Reduce compilation warnings
configure.cflags-append     -Wno-deprecated-declarations

# Were only installing wine not the development files
destroot.target             install-lib

post-destroot {
    set docdir ${prefix}/share/doc/${my_name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} \
        ANNOUNCE \
        AUTHORS \
        COPYING.LIB \
        LICENSE \
        README \
        ${destroot}${docdir}
}

if {[option universal_possible] && [variant_isset universal]} {
    notes-append "
        \n
        Wine supports both 32-bit and 64-bit now. It is compatible with your\
        existing 32-bit wine prefix, but it will now default to 64-bit when you\
        create a new wine prefix. The architecture can be selected using the\
        WINEARCH environment variable which can be set to either \"win32\" or\
        \"win64\".

        To create a new pure 32-bit prefix, you can run:
            \$ WINEARCH=win32 WINEPREFIX=~/.wine32 winecfg

        See the Wine FAQ for details: https://wiki.winehq.org/FAQ#Wineprefixes
    "
}

platform darwin arm {
    configure.pre_args.x86_64-prepend [muniversal::get_triplets x86_64]
}

livecheck.url               ${homepage}
livecheck.type              regex
livecheck.regex             {"/announce/([^"]+)"}
